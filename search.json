[{"path":"https://pepijn-devries.github.io/AmigaFFH/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pepijn de Vries. Author, maintainer, data contributor.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Vries P (2024). AmigaFFH: Commodore Amiga File Format Handler. R package version 0.4.6, https://github.com/pepijn-devries/AmigaFFH/, https://pepijn-devries.github.io/AmigaFFH/.","code":"@Manual{,   title = {AmigaFFH: Commodore Amiga File Format Handler},   author = {Pepijn {de Vries}},   year = {2024},   note = {R package version 0.4.6, https://github.com/pepijn-devries/AmigaFFH/},   url = {https://pepijn-devries.github.io/AmigaFFH/}, }"},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"amigaffh","dir":"","previous_headings":"","what":"Commodore Amiga File Format Handler","title":"Commodore Amiga File Format Handler","text":"Amiga File Format Handler package (AmigaFFH) designed interpret file formats native Commodore Amiga machines. combination adfExplorer package package can used interpret older file formats native Commodore Amiga. focus package older system (Amiga OS <= 3.0). allow analyse interpret files scripted environment R. sections prominent examples supported file formats. detailed overview, please consult package documentation (?AmigaFFH)","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Commodore Amiga File Format Handler","text":"Get CRAN version Get development version R-Universe","code":"install.packages(\"ProTrackR\") install.packages(\"ProTrackR\", repos = c('https://pepijn-devries.r-universe.dev', 'https://cloud.r-project.org'))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Commodore Amiga File Format Handler","text":"ultra-short demostrations selection supported Amiga file types","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"iff","dir":"","previous_headings":"Usage","what":"IFF","title":"Commodore Amiga File Format Handler","text":"Interchange File Format (IFF) file container hold kind data. example bitmap image stored file.","code":"library(AmigaFFH) #> Loading required package: tuneR  example.iff <-   system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\") |>   read.iff()  par(bg = \"black\") plot(example.iff, interpolate = FALSE)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"amigabasic","dir":"","previous_headings":"Usage","what":"AmigaBasic","title":"Commodore Amiga File Format Handler","text":"AmigaBasic simple interpreted programming language early Commodore Amiga’s. code stored binary format save disk memory space. example read file.","code":"system.file(\"demo.bas\", package = \"AmigaFFH\") |>   read.AmigaBasic() #> OPEN \"ball.shp\" FOR INPUT AS 1 #> OBJECT.SHAPE 1,INPUT$(LOF(1),1) #> CLOSE 1 #> OBJECT.X 1,320 #> OBJECT.Y 1,127 #> OBJECT.ON 1 #> OBJECT.START #> LET t=0 #> PRINT \"Press any key to continue...\" #> WHILE INKEY$ =\"\" #>   OBJECT.X 1, 320+200*SIN(t) #>   OBJECT.Y 1, 127+100*COS(t) #>   t=t+.001 #> WEND #> SCREEN 1,320,256,3,1 #> WINDOW 1,\"Bob Window\",(0,0)-(297,242),31,1 #> PALETTE 0,1,1,1 #> PALETTE 1,.1333333,.4,.7333333 #> PALETTE 2,.2,.4,.7333333 #> PALETTE 3,.2666667,.4666667,.6666667 #> PALETTE 4,.4666667,.5333333,.6 #> PALETTE 5,.6,.6,.6 #> PALETTE 6,.6666667,.6666667,.6666667 #> PALETTE 7,.7333333,.7333333,.7333333 #> FOR i% = 0 TO 7 #>   COLOR i% #>   AREA (i%*10, 30) #>   AREA STEP (10, 0) #>   AREA STEP (0, 10) #>   AREA STEP (-10,0) #>   AREAFILL #> NEXT i% #> OPEN \"r_logo.shp\" FOR INPUT AS 1 #> OBJECT.SHAPE 2,INPUT$(LOF(1),1) #> CLOSE 1 #> OBJECT.X 2,160 #> OBJECT.Y 2,127 #> OBJECT.ON 2 #> PRINT \"Press any key to stop...\" #> WHILE INKEY$=\"\" #>   OBJECT.X 2, 160+100*SIN(t*.3) #>   OBJECT.Y 2, 127+50*COS(t) #>   t=t+.01 #> WEND #> SCREEN CLOSE 1 #> END"},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"amiga-file-icons","dir":"","previous_headings":"Usage","what":"Amiga File Icons","title":"Commodore Amiga File Format Handler","text":"Amiga, file icons stored separate files. example create file.","code":"icon <- simpleAmigaIcon() plot(icon, interpolate = FALSE)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"amiga-fonts","dir":"","previous_headings":"Usage","what":"Amiga Fonts","title":"Commodore Amiga File Format Handler","text":"Commodore Amiga used bitmap fonts display texts. package comes example object can stored Amiga Font file.","code":"data(font_example)  plot(font_example, interpolate = FALSE)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"system-configuration","dir":"","previous_headings":"Usage","what":"System configuration","title":"Commodore Amiga File Format Handler","text":"systemconfiguration file used store system preferences (screen resolution, font, default printer, etc.). loaded boot process. exaple shows create file.","code":"simpleSysConfig() #> Amiga system-configuration #> FontHeight:  8 #> Printer: parallel generic #> Interlaced:  FALSE"},{"path":"https://pepijn-devries.github.io/AmigaFFH/index.html","id":"developmental-status","dir":"","previous_headings":"","what":"Developmental status","title":"Commodore Amiga File Format Handler","text":"years since initial release package. Since ’s release lot changed R skill set. still plans package, requires drastic changes. Therefore, apply minimal maintenance package. Meanwhile work complete overhaul released due time new package. new package : similar features current package. implement rendering procedures C++ giving package speed boost. , please enjoy current package .","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic-files.html","id":null,"dir":"Reference","previous_headings":"","what":"'demo.bas', 'r_logo.shp' and 'ball.shp' as example files for AmigaBasic and AmigaBasicShape objects — AmigaBasic-files","title":"'demo.bas', 'r_logo.shp' and 'ball.shp' as example files for AmigaBasic and AmigaBasicShape objects — AmigaBasic-files","text":"'demo.bas', 'r_logo.shp' 'ball.shp' example files AmigaBasic() AmigaBasicShape() objects","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic-files.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"'demo.bas', 'r_logo.shp' and 'ball.shp' as example files for AmigaBasic and AmigaBasicShape objects — AmigaBasic-files","text":"See AmigaBasic() AmigaBasicShape() information format.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic-files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'demo.bas', 'r_logo.shp' and 'ball.shp' as example files for AmigaBasic and AmigaBasicShape objects — AmigaBasic-files","text":"'r_logo.shp' 'ball.shp' files formatted can read read.AmigaBasicShape(). serve example AmigaBasicShape() class, first represents blitter object, latter sprite. 'demo.bas' file example binary encoded Amiga Basic script. can read read.AmigaBasic(). script demonstrates shape files used Amiga Basic.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic-files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'demo.bas', 'r_logo.shp' and 'ball.shp' as example files for AmigaBasic and AmigaBasicShape objects — AmigaBasic-files","text":"","code":"read.AmigaBasic(system.file(\"demo.bas\", package = \"AmigaFFH\")) #> OPEN \"ball.shp\" FOR INPUT AS 1 #> OBJECT.SHAPE 1,INPUT$(LOF(1),1) #> CLOSE 1 #> OBJECT.X 1,320 #> OBJECT.Y 1,127 #> OBJECT.ON 1 #> OBJECT.START #> LET t=0 #> PRINT \"Press any key to continue...\" #> WHILE INKEY$ =\"\" #>   OBJECT.X 1, 320+200*SIN(t) #>   OBJECT.Y 1, 127+100*COS(t) #>   t=t+.001 #> WEND #> SCREEN 1,320,256,3,1 #> WINDOW 1,\"Bob Window\",(0,0)-(297,242),31,1 #> PALETTE 0,1,1,1 #> PALETTE 1,.1333333,.4,.7333333 #> PALETTE 2,.2,.4,.7333333 #> PALETTE 3,.2666667,.4666667,.6666667 #> PALETTE 4,.4666667,.5333333,.6 #> PALETTE 5,.6,.6,.6 #> PALETTE 6,.6666667,.6666667,.6666667 #> PALETTE 7,.7333333,.7333333,.7333333 #> FOR i% = 0 TO 7 #>   COLOR i% #>   AREA (i%*10, 30) #>   AREA STEP (10, 0) #>   AREA STEP (0, 10) #>   AREA STEP (-10,0) #>   AREAFILL #> NEXT i% #> OPEN \"r_logo.shp\" FOR INPUT AS 1 #> OBJECT.SHAPE 2,INPUT$(LOF(1),1) #> CLOSE 1 #> OBJECT.X 2,160 #> OBJECT.Y 2,127 #> OBJECT.ON 2 #> PRINT \"Press any key to stop...\" #> WHILE INKEY$=\"\" #>   OBJECT.X 2, 160+100*SIN(t*.3) #>   OBJECT.Y 2, 127+50*COS(t) #>   t=t+.01 #> WEND #> SCREEN CLOSE 1 #> END read.AmigaBasicShape(system.file(\"ball.shp\", package = \"AmigaFFH\")) #> [1] \"A 16 x 16 sprite with 4 colours to be used in Amiga Basic.\" read.AmigaBasicShape(system.file(\"r_logo.shp\", package = \"AmigaFFH\")) #> [1] \"A 32 x 25 blitter object with 8 colours to be used in Amiga Basic.\""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"The S3 AmigaBasic class — AmigaBasic","title":"The S3 AmigaBasic class — AmigaBasic","text":"class represents content Amiga Basic files.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The S3 AmigaBasic class — AmigaBasic","text":"Amiga Basic BASIC-style programming language shipped early Commodore Amiga machines. requires interpreter run Amiga Basic script. AmigaFFH package interpret Amiga Basic scripts. allow encoding decoding scripts binary format originally stored Amiga. Amiga Basic scripts stored encoded binaries instead ASCII text files order save (time precious) memory disk space. Amiga Basic binary files start file header (identifier) followed line script binary data. AmigaBasic-class object stores line script list item vector raw data. Use .character() .AmigaBasic() switch character data AmigaBasic-class objects.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The S3 AmigaBasic class — AmigaBasic","text":"Although ample reference material Amiga BASIC language, documentation available script file storage format. implementation AmigaFFH package result painstaking reverse engineering part. Consequently Amiga Basic file encoders decoders implemented may infallible.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The S3 AmigaBasic class — AmigaBasic","text":"https://en.wikipedia.org/wiki/AmigaBASIC","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The S3 AmigaBasic class — AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The S3 AmigaBasic class — AmigaBasic","text":"","code":"## This creates an AmigaBasic-class object: bas <- as.AmigaBasic(\"PRINT \\\"hello world!\\\"\")  ## This will decode the object as plain text: as.character(bas) #> [1] \"PRINT \\\"hello world!\\\"\""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.reserved.html","id":null,"dir":"Reference","previous_headings":"","what":"List Amiga Basic reserved words. — AmigaBasic.reserved","title":"List Amiga Basic reserved words. — AmigaBasic.reserved","text":"Obtain list reserved Amiga Basic words. words allowed names variables labels Amiga Basic.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.reserved.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Amiga Basic reserved words. — AmigaBasic.reserved","text":"","code":"AmigaBasic.reserved()"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.reserved.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Amiga Basic reserved words. — AmigaBasic.reserved","text":"Returns vecor character strings reserved Amiga Basic words.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.reserved.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Amiga Basic reserved words. — AmigaBasic.reserved","text":"function return full list reserved Amiga Basic words. list serve manual basic (purpose consult external resources). list meant consult choosing label names Amiga Basic code. reserved words allowed names.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.reserved.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List Amiga Basic reserved words. — AmigaBasic.reserved","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasic.reserved.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Amiga Basic reserved words. — AmigaBasic.reserved","text":"","code":"AmigaBasic.reserved},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP-io.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","title":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","text":"Read write AmigaBasicBMAP() binary file format.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP-io.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","text":"","code":"read.AmigaBasicBMAP(file)  write.AmigaBasicBMAP(x, file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP-io.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","text":"file character string filename Amiga Basic BMAP file read written. x AmigaBasicBMAP() class object needs stored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP-io.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","text":"Returns AmigaBasicBMAP() class object read file case read.AmigaBasicBMAP. Otherwise, invisibly returns result call close file connection.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP-io.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","text":"Amiga Basic BMAP file maps offset routines Amiga libraries can read comprehensive list written back binary file using functions.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP-io.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP-io.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and write Amiga Basic BMAP files — read.AmigaBasicBMAP","text":"","code":"## A small fragment of the dos.library BMAP would look like this: dos.bmap <- as.AmigaBasicBMAP(list(   xOpen = list(     libraryVectorOffset = -30,     registers = as.raw(2:3)   ),   xClose = list(     libraryVectorOffset = -36,     registers = as.raw(2)   ),   xRead = list(     libraryVectorOffset = -42,     registers = as.raw(2:4)   ) ))  ## This will write the BMAP to a file: write.AmigaBasicBMAP(dos.bmap, file.path(tempdir(), \"dos.bmap\"))  ## This will read the same file: dos.bmap.copy <- read.AmigaBasicBMAP(file.path(tempdir(), \"dos.bmap\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"The S3 AmigaBasicBMAP class — AmigaBasicBMAP","title":"The S3 AmigaBasicBMAP class — AmigaBasicBMAP","text":"class represents content Amiga Basic BMAP files.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The S3 AmigaBasicBMAP class — AmigaBasicBMAP","text":"Amiga operating system made use library files execute specific (repetitive/routine) tasks. Amiga Basic also able call routines library files. order , required 'bmap' file library. file contains map library specifies: name routine; `Library Vector Offset' (explained ); used CPU registers (explained ). `Library Vector Offset' offset base address library memory. offsets indicates specific executable routine starts. CPU registers used (temporary) store (pointers ) input data used routine. BMAP file thus lists CPU registers used specified routines.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The S3 AmigaBasicBMAP class — AmigaBasicBMAP","text":"https://en.wikipedia.org/wiki/AmigaOS#Libraries_and_devices","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicBMAP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The S3 AmigaBasicBMAP class — AmigaBasicBMAP","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicShape.html","id":null,"dir":"Reference","previous_headings":"","what":"The S3 AmigaBasicShape class — AmigaBasicShape","title":"The S3 AmigaBasicShape class — AmigaBasicShape","text":"class represents file format used Amiga Basic store bitmap graphics: blitter objects sprites.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicShape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The S3 AmigaBasicShape class — AmigaBasicShape","text":"Amiga Basic used specific format store bitmap images displayed using Basic code. sprites blitter objects can stored used. class used represent files.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The S3 AmigaBasicShape class — AmigaBasicShape","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBasicShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The S3 AmigaBasicShape class — AmigaBasicShape","text":"","code":"ball   <- read.AmigaBasicShape(system.file(\"ball.shp\", package = \"AmigaFFH\")) r_logo <- read.AmigaBasicShape(system.file(\"r_logo.shp\", package = \"AmigaFFH\"))  plot(ball)  plot(r_logo)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":null,"dir":"Reference","previous_headings":"","what":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"comprehensive representation monochromous Amiga bitmap fonts.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"Nowadays fonts represented vector graphics computer systems. original Commodore Amiga, screen resolution, system memory cpu speed limited. systems, efficient use bitmap images represent glyphs fonts. AmigaBitmapFontSet AmigaBitmapFont classes can used represent Amiga bitmap fonts. Commodore Amiga directory named 'FONTS' located root, (bitmap) fonts stored. Font sets stored font name *.font extension. Files *.font extension contain bitmap images font. Rather *.font file contained information font heights (pixels) available, addition meta-information. bitmap images stored separate files individual height. AmigaBitmapFontSet S3 class forms comprehensive format (named list) represent *.font files. AmigaBitmapFont S3 class comprehensive format (named list) represent font bitmap glyph information. AmigaBitmapFontSet objects hold one AmigaBitmapFont objects. AmigaBitmapFont AmigaBitmapFontSet objects essentially named lists. structure important elements described . Although possible replace elements manually, advisable know may break validity font.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":"amigabitmapfontset","dir":"Reference","previous_headings":"","what":"AmigaBitmapFontSet","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"fch_FileID: factor levels 'FontContents', 'TFontContents' 'ScalableOutline'. specifies type font. Currently first level supported. fch_NumEntries: number font heights available font. match length FontContents. change value manually. FontContents: list bitmap entries specific font height (pixels). name element list 'pt' followed height. element list holds elements: Miscellaneous: Miscellaneous information \\*.font file fc_FileName: element represents filename nested font bitmap images. Note valid Commodore Amiga filename. best modify name using fontName(). Note field cause problems Commodore Amiga filenames can contain characters modern platforms allow (question mark). BitmapFont: element type AmigaBitmapFont structured described following section. information element longer part *.font file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":"amigabitmapfont","dir":"Reference","previous_headings":"","what":"AmigaBitmapFont","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"Information represented AmigaBitmapFont stored *.font files. Rather stored sub-directories font separate files. following structure: Miscellaneous: Elements information font properties style, also relative file pointers. glyph.info: data.frame containing glyph info information specific glyphs row. row matches specific ASCII code, ranging tf_LoChar tf_HiChar. additional row contains information default glyph range tf_LoChar tf_HiChar. data.frame thus 2 + tf_HiChar - tf_LoChar rows. table used extract plot glyph bitmap image correctly. bitmap: monochromous bitmap image font's glyphs single line. simple raster object (see grDevices::.raster()) additional attribute 'palette', lists two colours image. palette, first colour background colour second colour interpreted foregroundcolour.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":"useful-functions","dir":"Reference","previous_headings":"","what":"Useful functions","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"importing exporting following functions useful: read.AmigaBitmapFont(), read.AmigaBitmapFontSet(), write.AmigaBitmapFont() write.AmigaBitmapFontSet(). following generic functions implemented objects: plot(), print, .raster() .raw(). Use c() combine one AmigaBitmapFont objects AmigaBitmapFontSet.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"http://amigadev.elowar.com/read/ADCD_2.1/Libraries_Manual_guide/node03E0.html http://amigadev.elowar.com/read/ADCD_2.1/Libraries_Manual_guide/node03DE.html http://amigadev.elowar.com/read/ADCD_2.1/Libraries_Manual_guide/node05BA.html","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaBitmapFont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The S3 AmigaBitmapFont and AmigaBitmapFontSet classes — AmigaBitmapFont","text":"","code":"## 'font_example' is an example of the AmigaBitmapFontSet object: data(font_example)  ## An AmigaBitmapFont object can also be extracted from this object: font_example_9 <- getAmigaBitmapFont(font_example, 9)  ## the objects can be printed, plotted, converted to raw data or a raster: print(font_example) #> AmigaFFH #>   y-size 8, diskfont, proportional, designed #>   y-size 9, diskfont, proportional, designed plot(font_example)  font_example_raw    <- as.raw(font_example) font_example_raster <- as.raster(font_example)  ## You can also format text using the font: formated_raster     <- as.raster(font_example, text = \"Foo bar\", style = \"bold\") plot(font_example, text = \"Foo bar\", style = \"underlined\", interpolate = FALSE)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaFFH-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The Amiga File Format Handler package — AmigaFFH-package","title":"The Amiga File Format Handler package — AmigaFFH-package","text":"Amiga File Format Handler package (AmigaFFH) designed interpret file formats native Commodore Amiga machines.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaFFH-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Amiga File Format Handler package — AmigaFFH-package","text":"combination adfExplorer package package can used interpret older file formats native Commodore Amiga. focus package older system (Amiga OS <= 3.0). allow analyse interpret files scripted environment R. Note functions methods package implemented scripted source code may run fast.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaFFH-package.html","id":"supported-file-formats","dir":"Reference","previous_headings":"","what":"Supported File Formats","title":"The Amiga File Format Handler package — AmigaFFH-package","text":"package supports number file formats. ProTracker module file format requires sophisticated interpretation dedicated package (ProTrackR) developed purpose. following formats supported package (extend): Amiga Basic binary encode scripts Amiga Basic shapes used scripts display specific graphics. Bitmap Font (.font). Originally fonts stored separate files Amiga. overarching '.font' file contained generic information, amongst others specific pixel heights available font. actual font bitmap images stored separate files. file available individual font height. details see AmigaBitmapFont() AmigaBitmapFontSet(). Interchange File Format (IFF). file format actually container wide variety data flavours. following supported: 8SVX (8-bit sampled voices (.e., audio)). major restrictions package's implementation. ANIM (animations). display modes supported per ILBM. Furthermore, vertical byterun encoding animation frames encoding currently supported. ILBM (InterLeaved BitMap images). Specific display modes ('extra halfbrite') can cases decoded, encoding modes may (yet) supported. details see IFFChunk(), interpretIFFChunk(), read.iff() write.iff(). Hardware sprites. format follows hardware structure displaying sprites screen. usually used file format , can found embedded files (instance mouse pointer embedded hardware sprite 'system-configuration' file). details see hardwareSprite(). System-configuration. file stored 'devs' directory system disk. file name suggests, holds many systems configurations. See SysConfig details. Workbench icons (.info). Icons (.e., graphical representation files directories Amiga) stored separate files extension '.info'. See AmigaIcon() details. future versions package file types may added list.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaFFH-package.html","id":"in-addition-","dir":"Reference","previous_headings":"","what":"In Addition...","title":"The Amiga File Format Handler package — AmigaFFH-package","text":"Several helper functions also exported package. give access older compression techniques, run length encoding (packBitmap()) delta Fibonacci compression (deltaFibonacciCompress()). also techniques help converting modern files classic file formats vice versa. instance function dither() full colour images limited colour palette.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaFFH-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Amiga File Format Handler package — AmigaFFH-package","text":"Documentation several Amiga File types: http://amigadev.elowar.com/read/ADCD_2.1/Devices_Manual_guide/","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaFFH-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The Amiga File Format Handler package — AmigaFFH-package","text":"Maintainer: Pepijn de Vries pepijn.devries@outlook.com [data contributor]","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"The S3 AmigaIcon class — AmigaIcon","title":"The S3 AmigaIcon class — AmigaIcon","text":"comprehensive representation Amiga Workbench icon file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaIcon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The S3 AmigaIcon class — AmigaIcon","text":"Files, directories similar objects depicted icons Amiga Workbench (Amiga's equivalent now mostly known computer's desktop). Icons actually separate files exact name file directory represents, except additional `.info' extension. addition graphical representation files directories, icon files also contained additional information file. instance indicate tool required open file. classic Amiga Workbench icon file rather complex structure basically dump stored memory. result contains many memory pointers really necassary store file. S3 AmigaIcon class used represent complex files named list. elements list mostly identical names listed document top referenced . names usually self-explanatory, referred documents can also consulted obtain detailed information respect elements. pointed earlier, elements meaningful use. possible change values list, values may valid. Note fully checked validity. Invalid values may result errors writing binary file using write.AmigaIcon(), may simply work properly Amiga emulator. original `.info' file extended NewIcon OS3.5 IFFChunk() data, allowed icons larger colour depths. extensions currently implemented. Use simpleAmigaIcon() creating simple AmigaIcon object can modified. Use read.AmigaIcon() read, write.AmigaIcon() write workbench icon files (*.info). rawToAmigaIcon() .raw() AmigaIcon can coerced back forth raw (binary) form.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaIcon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The S3 AmigaIcon class — AmigaIcon","text":"http://www.evillabs.net/index.php/Amiga_Icon_Formats http://fileformats.archiveteam.org/wiki/Amiga_Workbench_icon http://amigadev.elowar.com/read/ADCD_2.1/Libraries_Manual_guide/node0241.html http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_3._guide/node05D6.html","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/AmigaIcon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The S3 AmigaIcon class — AmigaIcon","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ExtractBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","title":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","text":"Extract replace lines Amiga Basic code","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ExtractBasic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","text":"","code":"# S3 method for class 'AmigaBasic' x[i]  # S3 method for class 'AmigaBasic' x[i] <- value  # S3 method for class 'AmigaBasic' x[[i]]  # S3 method for class 'AmigaBasic' x[[i]] <- value"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ExtractBasic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","text":"x AmigaBasic class object specific lines need extracted replaced. case [[', integer index, representing line-number basic code selected. case [': vector numeric indices. index used select specific lines. Negative values deselect lines. value vector character strings AmigaBasic() class object used replace selected indices . value represent number lines code selected number lines.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ExtractBasic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","text":"extraction method returns AmigaBasic() object based lines selected . replacement method returns AmigaBasic() object selected lines replaced value.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ExtractBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","text":"Extract replace specific lines AmigaBasic()-class object.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ExtractBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ExtractBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or replace lines of Amiga Basic code — [.AmigaBasic","text":"","code":"## First generate a few lines of Basic code: bas <- as.AmigaBasic(c(   \"LET a = 1\",   \"a = a + 1\",   \"PRINT \\\"a now equals\\\";a\",   \"INPUT \\\"clear screen (y/n)? \\\", b$\",   \"IF UCASE$(b$) = \\\"Y\\\" THEN CLS\" ))  ## Select only lines 4 and 5: bas[4:5] #> INPUT \"clear screen (y/n)? \", b$ #> IF UCASE$(b$) = \"Y\" THEN CLS  ## use negative indices to deselect specific lines. ## deselect line 2: bas[-2] #> LET a = 1 #> PRINT \"a now equals\";a #> INPUT \"clear screen (y/n)? \", b$ #> IF UCASE$(b$) = \"Y\" THEN CLS  ## replace line 2 bas[2] <- \"a = a + 2\"  ## You can also use AmigaBasic class object as replacement bas[2] <- as.AmigaBasic(\"a = a + 3\")  ## single lines can also be selected with '[[' bas[[2]] #> a = a + 3"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A class structure to represent IFF files — IFFChunk-class","title":"A class structure to represent IFF files — IFFChunk-class","text":"S4 class structure represent data stored Interchange File Format (IFF).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A class structure to represent IFF files — IFFChunk-class","text":"Interchange File Format (IFF) introduced 1985 Electronic Arts. format stores files standardised modular objects, called `chunks'. start chunk specified type data can expected size data . forward thinking way storing data, similar structures still used modern file formats (PNG images XML files). Although IFF format still use, new standardised chunk types can still registered, package focus older chunk types primarily used Commodore Amiga (OS <= 3.0). IFF files contain kind information. contain bitmap images, also audio clips (formatted) texts. IFFChunk class designed theoretically can hold type IFF data. package mostly focus early IFF file types (.e., IFF chunks originally registered Electronic Arts). IFF files read package none lossy way (read.iff()), information preserved (even unknown type, long chunk identifier 4 characters long). means object needs interpreted order make sense (interpretIFFChunk()). interpretation returns simplified interpretations class IFF.supported (see IFFChunk-method() supported chunk types). Note interpretation process (meta-)information may get lost. converting IFF.objects back IFFChunk() objects (possible) therefore result object different one stored original file even destroy correct interpretation IFF objects. IFF files thus handled care.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A class structure to represent IFF files — IFFChunk-class","text":"chunk.type four character long code reflecting type information represented chunk. chunk.data list holds either one valid IFFChunks single vector raw data. data can interpreted context specified type cases information IFFChunks.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A class structure to represent IFF files — IFFChunk-class","text":"https://wiki.amigaos.net/wiki/IFF_Standard https://wiki.amigaos.net/wiki/IFF_FORM_and_Chunk_Registry https://en.wikipedia.org/wiki/Interchange_File_Format","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A class structure to represent IFF files — IFFChunk-class","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A class structure to represent IFF files — IFFChunk-class","text":"","code":"## load an IFF file example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## 'example.iff' is of class IFFChunk: class(example.iff) #> [1] \"IFFChunk\" #> attr(,\"package\") #> [1] \"AmigaFFH\"  ## let's plot it: plot(example.iff)   ## The default constructor will create an empty FORM: new(\"IFFChunk\") #> - FORM  ## The constructor can also be used to create simple chunks: new(\"IFFChunk\",     chunk.type = \"TEXT\",     chunk.data = list(charToRaw(\"A simple chunk\"))) #> - TEXT"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to and create IFFChunk objects — IFFChunk-method","title":"Coerce to and create IFFChunk objects — IFFChunk-method","text":"Convert IFF.objects (created interpretIFFChunk()) IFFChunk() objects. basic IFFChunk() can also created method providing chunk type name.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to and create IFFChunk objects — IFFChunk-method","text":"","code":"IFFChunk(x, ...)  # S3 method for class 'character' IFFChunk(x, ...)  # S3 method for class 'IFF.FORM' IFFChunk(x, ...)  # S3 method for class 'IFF.BODY' IFFChunk(x, ...)  # S3 method for class 'IFF.ANNO' IFFChunk(x, ...)  # S3 method for class 'IFF.AUTH' IFFChunk(x, ...)  # S3 method for class 'IFF.CHRS' IFFChunk(x, ...)  # S3 method for class 'IFF.NAME' IFFChunk(x, ...)  # S3 method for class 'IFF.TEXT' IFFChunk(x, ...)  # S3 method for class 'IFF.copyright' IFFChunk(x, ...)  # S3 method for class 'IFF.CHAN' IFFChunk(x, ...)  # S3 method for class 'IFF.VHDR' IFFChunk(x, ...)  # S3 method for class 'IFF.8SVX' IFFChunk(x, ...)  # S3 method for class 'IFF.ILBM' IFFChunk(x, ...)  # S3 method for class 'IFF.CMAP' IFFChunk(x, ...)  # S3 method for class 'IFF.BMHD' IFFChunk(x, ...)  # S3 method for class 'IFF.CAMG' IFFChunk(x, ...)  # S3 method for class 'IFF.CRNG' IFFChunk(x, ...)  # S3 method for class 'IFF.ANIM' IFFChunk(x, ...)  # S3 method for class 'IFF.ANHD' IFFChunk(x, ...)  # S3 method for class 'IFF.DLTA' IFFChunk(x, ...)  # S3 method for class 'IFF.DPAN' IFFChunk(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to and create IFFChunk objects — IFFChunk-method","text":"x S3 class IFF.object needs coerced IFFChunk-class() object. IFF.objects created interpretIFFChunk() method. x can also character string IFF chunk type (e.g., \"FORM\" \"BMHD\"). case IFFChunk() object type created basic content. ... Arguments passed onto methods underlying interpretation specific IFF chunks. Allowed arguments depend specific type IFF chunk x represents.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to and create IFFChunk objects — IFFChunk-method","text":"Returns IFFChunk-class() representation x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce to and create IFFChunk objects — IFFChunk-method","text":"IFF data stored IFFChunk-class() object read IFF file (read.iff()). objects reflect file structure well, data stored raw information. IFF files can contain wide variety information types, ranging bitmap images audio clips. raw information stored IFFChunk() objects can interpreted meaningful representations can handled R. achieved interpretIFFChunk() method, returns IFF.objects. IFF.objects less strict representation IFF Chunk, easier handle R. interpretation method lossy may preserve information IFF.object. IFFChunk-method() can coerce IFF.back strictly defined IFFChunk-class() objects. careful conversions IFFChunk-class() IFF.objects vice versa, information may get lost. detailed information IFF chunks can found IFF chunk registry (see references). IFF.FORM represents FORM chunk, container can hold kind chunk. interpreted, represented list, element interpreted chunk nested inside FORM. IFF.BODY represents actual data IFF file. However, without context chunk interpreted therefore interpreted vector raw data. IFF.ANIM represents animation (ANIM) chunk. interpreted, return list element animation frame represented IFF.ILBM object. animation frame nested inside ILBM chunk nested inside FORM chunk, nested inside ANIM chunk. IFF.ANHD represents ANimation HeaDer (ANHD) chunk. interpreted, returns named list containing following information: operation character string indicating bitmap data animation frame encoded. Can one following: \"standard\", \"XOR\", \"LongDeltaMode\", \"ShortDeltaMode\", \"GeneralDeltamode\", \"ByteVerticalCompression\", \"StereoOp5\", \"ShortLongVerticalDeltaMode\". Currently, ByteVerticalCompression implemented package. mask vector 8 logical values. currently ignored. w h positive numeric values, specifying width height frame (identical frames). x y numeric values, specifying plotting position frame. abstime positive numeric value - currently unused - used timing frame relative time first frame displayed. jiffies (1/60 sec). reltime positive numeric value timing frame relative time previous frame displayed. jiffies (1/60 sec). interleave currently unused. set 0. pad0 padding byte (raw) future use. flags vector 32 logical values. contain information bitmap data stored. pad1 16 padding bytes (raw) future use. IFF.DPAN represents DPaint ANimation (DPAN) chunk. software require chunk correctly derive total number frames animation. interpreted, return named list following elements: version numeric version number. nframes positive numeric value, indicating number frames animation. flags vector 32 logical values. Ignored package intended future implementations. IFF.DLTA represents delta mode data chunk (DLTA). first animation frame stored normal InterLeaved BitMap (ILBM) image described . following frames store differences bitmap data compared previous frames interleaved. thus incorrectly embedded ILBM chunk (kept backward compatibility). interpreted, grDevices raster object returned showing differences. meaningful interpret chunks , rather entire parent ANIM chunk. IFF.ILBM represents InterLeaved BitMap (ILBM) chunks. interpreted raster image (see grDevices::.raster()). ILBM chunks usually nested inside FORM container. IFF.BMHD represents header chunk bitmap (BMHD), always present (nested inside) ILBM chunk. interpreted named list containing following elements: w h positive numeric values specifying bitmap width height pixels. Note width can positive whole number, whereas bitmap data always width divisible 16. x y numeric values specifying plotting position relative top left position screen. Although required bitmap header. ignored interpretation bitmap images. nPlanes positive value indicating number bitplanes image. number colours image can calculated 2^nPlanes. Masking indicates whether bitplanes masked (.e. treated transparent). character string equalling following: \"mskNone\", \"mskHasMask\", \"mskHasTransparentColour\", \"mskLasso\" \"mskUnknown\". first (transparency) third (one colours treated transparent) id currently interpreted correctly. others ignored. \"mskUnknown\" means undocumented mask applied image. Compression indicates whether bitmap data compressed. character string can equal following: \"cmpNone\", \"cmpByteRun1\" \"cmpUnknown\". latter means undocumented form compression applied currently ignored. cases bitmap data compressed cmpByteRun1 algorithm (packBitmap()). cases, bitmap data compressed (cmpNone). pad raw byte used align data. ignored interpretation. transparentColour numeric value indicates colour number palette treated fully transparent (Masking equals \"mskHasTransparentColour\"). xAspect yAspect positive numeric values indicate aspect ratio pixels image. Amiga screen modes allowed extreme pixel aspect ratios. values used stretch image intended display mode. pageWidth pageHeight positive numeric values indicating size screen image displayed. ignored interpretation image. IFF.CMAP represents colour map (CMAP) palette bitmap image. Although common, chunk optional can omitted parent ILBM chunk. interpreted vector colours (.e., character string formatted '#RRGGBB' named colours 'blue'). IFF.CAMG represents chunk information respect display mode bitmap image displayed. information can used determine correct pixel aspect ratio, sometimes required correctly interpret bitmap information. IFF.CAMG chunk interpreted named list containing following elements: monitor: factor indicating hardware monitor image created displayed (see amiga_monitors()). display.mode: factor indicating display mode image displayed (see amiga_display_modes()). IFF.CRNG optional chunk nested ILBM chunk. represents `colour range' used cycle colours bitmap's palette order achieve animation effects. interpreted named list following elements. chunk currently used interpretation ILBM images. padding two raw padding bytes ignored interpreted. rate numeric value specifying rate colours cycled. rate steps per second. flags flag indicates colours cycled. character string can equal following: \"RNG_OFF\", \"RNG_ACTIVE\", \"RNG_REVERSE\" \"RNG_UNKNOWN\". equal first, colours cycled. equal second, colours cycled. equal third, colours cycled reverse direction. equal latter, undocumented form cycling applied. low high numeric indices colours cycled. colour index low index high affected. IFF.8SVX represents 8-bit sampled voice chunks (8SVX). original Amiga supported 8-bit audio stored using IFF. 8SVX chunks can contain separate audio samples octave. 8SVX chunks usually stored inside FORM container. body chunk contains 8-bit PCM wave data compressed. 8SVX chunk interpreted package, list returned element represents octave given tuneR::Wave() object. Possible chunks nested 8SVX chunks currently supported package follows. IFF.VHDR represents voice header chunks (VHDR). contains (meta-)information audio stored body parent 8SVX chunk. interpreted, named list returned following elements: oneShotHiSamples numeric value indicating many samples audio wave first octave file, looped (repeated). repeatHiSamples numeric value indicating many samples audio wave first octave file, looped (repeated). samplesPerHiCycle numeric value specifying number samples per repeat cycle first octave, 0 unknown. number repeatHiSamples exact multiple samplesPerHiCycle. samplesPerSec numeric value specifying data sampling rate. ctOctave positive whole numeric value indicating many octaves included. 8SVX files audio wave resampled octave. wave data body starts audio sample highest octave (least number samples). data followed subsequent octave, number samples increase factor 2 octave. sCompression character string indicating whether wave data body compressed. can one following values: \"sCmpNone\" (compression), \"sCmpFibDelta\" (deltaFibonacciCompress()ion applied), \"sCmpUnknown\" (undocumented unknown form compression applied). volume numeric value 0 (minimum) 0x10000 (maximum) playback volume. IFF.CHAN represents channel chunk (CHAN). interpreted returns named list 1 named element: \"channel\". value can one following character strings \"LEFT\", \"RIGHT\" \"STEREO\". indicates many (one two) audio channels data available body parent 8SVX chunk. also indicates two channels audio played back. IFF.ANNO, IFF.AUTH, IFF.CHRS, IFF.NAME, IFF.TEXT IFF.copyright unformatted text chunks can included optionally chunk types. Respectively, represent annotation, author's name, generic character string, name work, generic unformatted text, copyright text. interpreted character string.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Coerce to and create IFFChunk objects — IFFChunk-method","text":"https://wiki.amigaos.net/wiki/IFF_FORM_and_Chunk_Registry","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/IFFChunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to and create IFFChunk objects — IFFChunk-method","text":"","code":"## load an IFF file example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## interpret the IFF file (in some cases information ## will get lost in this step): example.itpt <- interpretIFFChunk(example.iff)  ## now coerce back to a formal IFFChunk class object. ## Only information in the interpreted object is used ## The coerced object may therefore depart from the ## original read from the file. example.coerce <- IFFChunk(example.itpt)  ## and indeed the objects are not identical, as shown below. ## In this case the difference is not disastrous, the order ## of the colours in the palette have shifted. But be careful ## with switching between formal IFFChunk objects and ## interpreted IFF.ANY objects. identical(example.iff, example.coerce) #> [1] FALSE  ## It is also possible to create simple IFFChunk objects ## by providing the desired chunk type identifier as a ## character string.  ## This creates a basic bitmap header: bmhd <- IFFChunk(\"BMHD\")  ## This creates a basic colour palette: cmap <- IFFChunk(\"CMAP\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/SysConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"The S3 SysConfig class — SysConfig","title":"The S3 SysConfig class — SysConfig","text":"comprehensive representation Amiga system-configuration file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/SysConfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The S3 SysConfig class — SysConfig","text":"system-configuration file binary file stored `devs' folder root bootable Amiga DOS device, containing system preferences. used Amiga OS 1.x. Although used later versions, gradually phased settings may usable later versions. See references details. Definitions system-configuration file revised points. Revisions minor usually targeted backward compatibility. revision V38.2 (released 16 September 1992) implemented, latest documented version. sytem-configuration file contains settings serial parallel port printer. also contains settings `workbench' Amiga equivalent now mostly known computers desktop. Colours workbench shape mouse pointer also stored file. Settings mouse basic screen resolution also part file. SysConfig object comprehensive representation binary system-configuration file. list elements identical names listed documents provided references. names usually self-explanatory, referred documents can also consulted obtain detailed information respect elements. mouse pointer included hardwareSprite() object list. pointer image can replaced different hardwareSprite(), make sure height 16 pixels. possible change values list, values may valid. Note fully checked validity. Invalid values may result errors writing binary file using write.SysConfig(), may simply work properly Amiga emulator. Use simpleSysConfig() creating simple SysConfig object can modified. Use read.SysConfig() read, write.SysConfig() write system-configuration files. rawToSysConfig() .raw() SysConfig can coerced back forth raw (binary) form.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/SysConfig.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The S3 SysConfig class — SysConfig","text":"https://wiki.amigaos.net/wiki/Preferences#Preferences_in_1.3_and_Older_Versions_of_the_OS http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_2._guide/node00D5.html http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_3._guide/node063B.html","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/SysConfig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The S3 SysConfig class — SysConfig","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"Convert tuneR::WaveMC() objects (objects can coerced WaveMC objects) IFFChunk-class() object can stored valid Iterchange File Format (write.iff()).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"","code":"WaveToIFF(   x,   loop.start = NA,   octaves = 1,   compress = c(\"sCmpNone\", \"sCmpFibDelta\"),   ... )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"x tuneR::WaveMC() object needs converted IFFChunk() object. x can also class object can coerced tuneR::WaveMC() object. tuneR::Wave() PTSample() objects therefore also allowed. loop.start sample looped specific position end sample, argument specifies starting position samples (base 0) looping. loop.start therefore whole non-negative number. set NA negative values, sample looped. octaves whole positive numeric value indicating number octaves stored resulting IFF chunk. original wave resampled value larger 1. subsequent octave contain precisely twice many samples previous octave. compress character string indicating whether compression applied waveform. \"sCmpNone\" (default) applies compression, \"sCmpFibDelta\" applies lossy deltaFibonacciCompress()ion. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"Returns IFFChunk-class() object FORM container contains 8SVX waveform based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"tuneR::WaveMC() objects can read contemporary file containers tuneR::readWave() tuneR::readMP3(). function objects can converted IFFChunk-class() object can stored conform Interchange File Format (write.iff()). x pcm formatted 8-bit sample, x first normalised scaled pcm-formatted 8-bit sample using tuneR::normalize(). like result need convert sample 8-bit pcm calling function.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"https://en.wikipedia.org/wiki/8SVX","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/WaveToIFF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert WaveMC objects into an Interchange File Format object — WaveToIFF","text":"","code":"## First get an audio sample from the ProTrackR package snare.samp <- ProTrackR::PTSample(ProTrackR::mod.intro, 2)  ## The sample can easily be converted into an IFFChunk: snare.iff <- WaveToIFF(snare.samp)  ## You could also first convert the sample into a Wave object: snare.wav <- as(snare.samp, \"Wave\")  ## And then convert into an IFFChunk. The result is the same: snare.iff <- WaveToIFF(snare.wav)  ## You could also use a sine wave as input (although you will get some warnings). ## This will work because the vector of numeric data can be coerced to ## a WaveMC object # \\donttest{   sine.iff <- WaveToIFF(sin((0:2000)/20)) #> Warning: 'samp.rate' not specified, assuming 44100Hz #> Warning: 'bit' not specified, assuming 16bit #> Warning: Original 16-bit wave is normalized to an 8-bit wave. # }"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of special display modes — amiga_display_keys","title":"A list of special display modes — amiga_display_keys","text":"list special display modes Amiga corresponding raw keys.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_keys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of special display modes — amiga_display_keys","text":"data.frame 2 columns: column named 'mode': factor reflecting display mode, monitor bitwise mask column named 'code': vector 4 raw values used Amiga reflect specific display modes","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_keys.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A list of special display modes — amiga_display_keys","text":"table show specific special display modes Amiga monitors relate. raw codes can used interpret specific display modes listed amiga_display_modes(). information used interpret IFFChunk() objects type 'CAMG'. also used interpret ILBM images creating IFF files raster images.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_keys.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A list of special display modes — amiga_display_keys","text":"https://wiki.amigaos.net/wiki/Display_Database#ModeID_Identifiers http://amigadev.elowar.com/read/ADCD_2.1/AmigaMail_Vol2_guide/node00FD.html","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_keys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of special display modes — amiga_display_keys","text":"","code":"data(\"amiga_display_keys\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_modes.html","id":null,"dir":"Reference","previous_headings":"","what":"A table of display modes on the Amiga and corresponding raw codes — amiga_display_modes","title":"A table of display modes on the Amiga and corresponding raw codes — amiga_display_modes","text":"table display modes Amiga corresponding raw codes representing modes.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_modes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A table of display modes on the Amiga and corresponding raw codes — amiga_display_modes","text":"data.frame 4 columns: column named 'DISPLAY_MODE': factor reflecting display mode column named 'DISPLAY_MODE_ID': list containing vector 4 raw values used Amiga reflect specific display modes. raw values usually also stored bitmap images Interchange File Format IFFChunk() called 'CAMG'. column named 'MONITOR_ID': character string identifying monitor display specific mode. column named 'CHIPSET': factor identifying minimal chip set required display specific mode. OCS original chip set; ECS Enhanced Chip Set. AGA Advanced Graphics Architecture chip set (countries known just Advanced Architecture). AGA also display OCS ECS modes, ECS also display OCS modes, OCS display OCS modes.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_modes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A table of display modes on the Amiga and corresponding raw codes — amiga_display_modes","text":"table contains display modes available Amiga. also contains raw codes used represent modes. table also contains hardware monitors display specific modes, minimal chip set required display mode. data used interpret IFFChunk() objects type 'CAMG'. also used interpret ILBM images creating IFF files raster images.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_modes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A table of display modes on the Amiga and corresponding raw codes — amiga_display_modes","text":"https://wiki.amigaos.net/wiki/Display_Database#ModeID_Identifiers http://amigadev.elowar.com/read/ADCD_2.1/AmigaMail_Vol2_guide/node00FD.html","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_display_modes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A table of display modes on the Amiga and corresponding raw codes — amiga_display_modes","text":"","code":"data(\"amiga_display_modes\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_monitors.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of Amiga monitors — amiga_monitors","title":"A list of Amiga monitors — amiga_monitors","text":"table lists Amiga monitors corresponding raw codes represent monitors.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_monitors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list of Amiga monitors — amiga_monitors","text":"data.frame 2 columns: column named 'MONITOR_ID': factor representing Amiga monitor column named 'CODE': list containing vector 4 raw values used Amiga represent specific monitor.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_monitors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A list of Amiga monitors — amiga_monitors","text":"table contains monitors compatible Amiga. also contains raw codes used represent . data used interpret IFFChunk() objects type 'CAMG'. also used interpret ILBM images creating IFF files raster images.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_monitors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A list of Amiga monitors — amiga_monitors","text":"https://wiki.amigaos.net/wiki/Display_Database#ModeID_Identifiers","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_monitors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list of Amiga monitors — amiga_monitors","text":"","code":"data(\"amiga_monitors\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_palettes.html","id":null,"dir":"Reference","previous_headings":"","what":"Commonly used palettes on the Commodore Amiga — amiga_palettes","title":"Commonly used palettes on the Commodore Amiga — amiga_palettes","text":"amiga_palettes named list, element represents commonly used palette Commodore Amiga.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_palettes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Commonly used palettes on the Commodore Amiga — amiga_palettes","text":"named list following elements: wb.os1: vector 4 colours used default palette Workbench Amiga OS 1.x. wb.os2: vector 8 colours. first 4 colours default colours standard Workbench Amiga OS 2.x. latter 4 additional colours used Workbench expansion MagicWB. spr.os1: vector 3 colours used default mouse pointer sprite Amiga OS 1.x. spr.os2: vector 3 colours used default mouse pointer sprite Amiga OS 2.x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_palettes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Commonly used palettes on the Commodore Amiga — amiga_palettes","text":"files contain bitmap images indexed palette store palette file. Amiga Workbench icons (AmigaIcon()) instance store index values palette, palette . amiga_palettes therefore provides commonly used palettes Amiga, files can interpreted.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/amiga_palettes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Commonly used palettes on the Commodore Amiga — amiga_palettes","text":"","code":"data(\"amiga_palettes\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"Coerce raw character data AmigaBasic() S3 class object","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"","code":"as.AmigaBasic(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"x x vector raw data character strings. x raw data, interpreted Amiga Basic binary encoded file. x vector character strings, element vector represent one line Basic code. line contain line break special characters, result errors. text represent valid Amiga Basic syntax. syntax checked limited extent package implement interpreter code. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"Returns AmigaBasic() class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"Convert text AmigaBasic() S3 class object. text consist valid Amiga BASIC syntaxis. function perform full check syntaxis, break fundamental syntaxis malformations","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"https://en.wikipedia.org/wiki/AmigaBASIC","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw or character data to an AmigaBasic class object — as.AmigaBasic","text":"","code":"## An AmigaBasic object can be created from text. ## Note that each line of code is a seperate element ## in the vector: bas <- as.AmigaBasic(c(   \"CLS ' Clear the screen\",   \"PRINT \\\"Hello world!\\\" ' Print a message on the screen\" ))  ## Let's make it raw data: bas.raw <- as.raw(bas)  ## We can also use the raw data to create an Amiga Basic object: ## Note that this effectively the same as calling 'rawToAmigaBasic' bas <- as.AmigaBasic(bas.raw)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasicBMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","title":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","text":"Coerce raw named list AmigaBasicBMAP() class object","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasicBMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","text":"","code":"as.AmigaBasicBMAP(x)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasicBMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","text":"x x vector raw data, needs structured stored binary file (see read.AmigaBasicBMAP()). x can also named list, name element corresponds routine library. element consist list 2 elements: first named libraryVectorOffset' hold numericoffset routine library (see details). second element namedregisters' contain vector raw values refering CPU registers used routine (see details).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasicBMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","text":"Returns AmigaBasicBMAP() based x","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasicBMAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","text":"Amiga Basic BMAP file maps offset routines Amiga libraries. function converts raw format stored file comprehensive S3 class object. can also convert named list S3 class object. See Arguments' Examples' sections format list.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasicBMAP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.AmigaBasicBMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw or named list to an AmigaBasicBMAP class object — as.AmigaBasicBMAP","text":"","code":"## For the dos.library, the start of the bmap list would look like: dos.list <- list(   xOpen = list(     libraryVectorOffset = -30,     registers = as.raw(2:3)   ),   xClose = list(     libraryVectorOffset = -36,     registers = as.raw(2)   ),   xRead = list(     libraryVectorOffset = -42,     registers = as.raw(2:4)   ) )  ## Note that the list above is incomplete, the dos.library holds more routines than shown here. ## This merely serves as an example. ## This list can be converted to an S3 class as follows: dos.bmap <- as.AmigaBasicBMAP(dos.list)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.character.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce an AmigaBasic class object to its character representation — as.character","title":"Coerce an AmigaBasic class object to its character representation — as.character","text":"Coerce AmigaBasic()-class object character representation","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce an AmigaBasic class object to its character representation — as.character","text":"","code":"# S3 method for class 'AmigaBasic' as.character(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce an AmigaBasic class object to its character representation — as.character","text":"x AmigaBasic() class object needs coerced character representation. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce an AmigaBasic class object to its character representation — as.character","text":"vector character strings, element vector character representation line Amiga Basic code stored x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.character.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce an AmigaBasic class object to its character representation — as.character","text":"Amiga Basic files encoded binary format also stored AmigaBasic()-class objects. Use function convert objects legible character data.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.character.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce an AmigaBasic class object to its character representation — as.character","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.character.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce an AmigaBasic class object to its character representation — as.character","text":"","code":"## First create an Amiga Basic object: bas <- as.AmigaBasic(\"PRINT \\\"Hello world!\\\"\")  ## now convert the object back into text: bas.txt <- as.character(bas)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","title":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","text":"Convert AmigaFFH objects contain bitmap images grDevices raster images.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","text":"","code":"# S3 method for class 'AmigaBasicShape' as.raster(x, selected = c(\"bitmap\", \"shadow\", \"collision\"), ...)  # S3 method for class 'AmigaBitmapFont' as.raster(x, text, style, palette, ...)  # S3 method for class 'AmigaBitmapFontSet' as.raster(x, text, style, palette, ...)  # S3 method for class 'hardwareSprite' as.raster(x, background = \"#AAAAAA\", ...)  # S3 method for class 'IFFChunk' as.raster(x, ...)  # S3 method for class 'AmigaIcon' as.raster(x, selected = FALSE, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","text":"x Object needs converted grDevices raster. can IFFChunk() containing interleaved bitmap image (ILBM) animation (ANIM), hardwareSprite(), AmigaBitmapFont() object AmigaBitmapFontSet() object. selected x object class AmigaIcon(), selected can used select specific state. set TRUE, raster AmigaIcon() based `selected' state icon. Otherwise based deselected state (default). x AmigaBasicShape() class object, selected can used select specific layer shape plot, can one \"bitmap\" (default), \"shadow\" \"collision\". ... Currently ignored. text Text (character string) formated x (x AmigaBitmapFont() AmigaBitmapFontSet(). style Argument valid x AmigaBitmapFont() AmigaBitmapFontSet(). styling applied missing NULL. One following styles can used 'bold', 'italic 'underlined'. palette Argument valid x AmigaBitmapFont() AmigaBitmapFontSet(). vector two colours. first element used background colour, second foreground. missing, transparent white black used. background Use argument background specify background colour case x hardwareSprite().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","text":"Returns grDevices raster image (grDevices::.raster()) based x. x animation (IFFChunk() type ANIM), list raster objects returned.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","text":"Images Amiga stored bitmap images indexed colour palettes. mainly due hardware memory limitations. Bitmap images also embedded several file types. method can used convert AmigaFFH objects read files grDevices raster images (grDevices::.raster()).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert AmigaFFH objects into grDevices raster images — as.raster.AmigaBasicShape","text":"","code":"## load an IFF file example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## The file contains an interleaved bitmap image that can be ## converted into a raster: example.raster <- as.raster(example.iff)  ## the raster can be plotted: plot(example.raster)   ## note that the IFFChunk can also be plotted directly: plot(example.iff)  ## Hardware sprites can also be converted into raster images. ## Let's generate a 16x16 sprite with a random bitmap: spr <- new(\"hardwareSprite\",            VStop = 16,            bitmap = as.raw(sample.int(255, 64, replace = TRUE)))  ## now convert it into a raster image. ## as the background colour is not specified for hardware ## sprite, we can optionally provide it here. spr.raster <- as.raster(spr, background = \"green\")  ## AmigaBasicShape objects can also be converted into rasters: ball <- read.AmigaBasicShape(system.file(\"ball.shp\", package = \"AmigaFFH\")) ball.rst <- as.raster(ball)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","title":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","text":"Convert AmigaFFH objects raw data, stored Commodore Amiga's memory files.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","text":"","code":"# S3 method for class 'AmigaBasic' as.raw(x, ...)  # S3 method for class 'AmigaBasicShape' as.raw(x, ...)  # S3 method for class 'AmigaBasicBMAP' as.raw(x)  # S3 method for class 'AmigaBitmapFont' as.raw(x, ...)  # S3 method for class 'AmigaBitmapFontSet' as.raw(x, ...)  # S3 method for class 'AmigaTimeVal' as.raw(x, ...)  # S4 method for class 'hardwareSprite' as.raw(x)  # S4 method for class 'IFFChunk' as.raw(x)  # S3 method for class 'IFF.ANY' as.raw(x, ...)  # S3 method for class 'SysConfig' as.raw(x, ...)  # S3 method for class 'AmigaIcon' as.raw(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","text":"x AmigaFFH object needs converted raw data. See usage section supported objects. ... Arguments passed IFFChunk-method() x class IFF..","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","text":"Returns vector raw data based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","text":"Objects originating package can cases converted raw data, stored original Amiga. See usage section currently supported objects. information x may included raw data returned, handle care. package grows additional objects can converted method.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/as.raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert AmigaFFH objects into raw data — as.raw.AmigaBasic","text":"","code":"## read an IFF file as an IFFChunk object: example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## This will recreate the exact raw data as it was read from the file: example.raw <- as.raw(example.iff)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/availableFontSizes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","title":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","text":"Get available font sizes (height) AmigaBitmapFontSet() pixels.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/availableFontSizes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","text":"","code":"availableFontSizes(x)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/availableFontSizes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","text":"x AmigaBitmapFontSet() available font sizes (height) number pixels need obtained.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/availableFontSizes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","text":"Returns vector numeric values specifying available font sizes (height pixels) x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/availableFontSizes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","text":"AmigaBitmapFontSet() can hold bitmaps multiple font sizes. Use function obtain available size set.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/availableFontSizes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/availableFontSizes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available font sizes from an AmigaBitmapFontSet — availableFontSizes","text":"","code":"data(font_example)  ## The example font holds two font sizes (8 and 9): availableFontSizes(font_example) #> [1] 8 9"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/bitmapToRaster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an Amiga bitmap image into a raster — bitmapToRaster","title":"Convert an Amiga bitmap image into a raster — bitmapToRaster","text":"Amiga images usually stored bitmap images indexed colours. function converts raw Amiga bitmap data raster data (grDevices::.raster()).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/bitmapToRaster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an Amiga bitmap image into a raster — bitmapToRaster","text":"","code":"bitmapToRaster(   x,   w,   h,   depth,   palette = grDevices::gray(seq(0, 1, length.out = 2^depth)),   interleaved = TRUE )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/bitmapToRaster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an Amiga bitmap image into a raster — bitmapToRaster","text":"x vector raw values, representing bitmap data. w Width pixels bitmap image. Can positive value. However, bitmap data `word' aligned amiga. means width stored bitmap data multiple 16 pixels. image cropped width specified . h Height pixels bitmap image. depth colour depth bitmap image (.e., number bit planes). image composed 2^depth indexed colours. palette vector 2^depth colours, used indexed colours bitmap image. default, grayscale palette used. explicitly set NULL, function returns matrix palette index values. interleaved logical value, indicating whether bitmap interleaved. interleaved bitmap image stores consecutive bitmap layer per horizontal scanline.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/bitmapToRaster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an Amiga bitmap image into a raster — bitmapToRaster","text":"Returns raster object (.raster()) specified grDevices() package. Unless, palette set NULL, case matrix numeric palette index values returned.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/bitmapToRaster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert an Amiga bitmap image into a raster — bitmapToRaster","text":"Bitmap images stored raw data, representing palette index colours, can converted raster data (grDevices::.raster()). latter data can easily plotted R. usually necessary call function directly, several convenient wrappers function. wrappers can convert specific file formats (IFF ILBM Hardware Sprites, see .raster()) raster objects. function provided completeness sake (want search images amiga memory dump).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/bitmapToRaster.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an Amiga bitmap image into a raster — bitmapToRaster","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/bitmapToRaster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an Amiga bitmap image into a raster — bitmapToRaster","text":"","code":"## first load an example image: example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## get the raw bitmap data, which is nested in the InterLeaved BitMap (ILBM) ## IFF chunk as the BODY: bitmap.data <- interpretIFFChunk(getIFFChunk(example.iff, c(\"ILBM\", \"BODY\")))  ## In order to translate the bitmap data into a raster object we need ## to know the image dimensions (width, height and colour depth). This ## information can be obtained from the bitmap header (BMHD):  bitmap.header <- interpretIFFChunk(getIFFChunk(example.iff, c(\"ILBM\", \"BMHD\")))  ## First the bitmap data needs to be unpacked as it was stored in a compresssed ## form in the IFF file (see bitmap.header$Compression):  bitmap.data <- unPackBitmap(bitmap.data)  ## It would also be nice to use the correct colour palette. This can be obtained ## from the CMAP chunk in the IFF file:  bitmap.palette <- interpretIFFChunk(getIFFChunk(example.iff, c(\"ILBM\", \"CMAP\")))  example.raster <- bitmapToRaster(bitmap.data,                                  bitmap.header$w,                                  bitmap.header$h,                                  bitmap.header$nPlanes,                                  bitmap.palette)  ## We now have a raster object that can be plotted:  plot(example.raster, interpolate = FALSE)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/c.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple AmigaFFH objects — c","title":"Combine multiple AmigaFFH objects — c","text":"Use function correctly combine one AmigaBitmapFont() class objects single AmigaBitmapFontSet() class object, combine multiple AmigaBasic() class objects.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple AmigaFFH objects — c","text":"","code":"# S3 method for class 'AmigaBasic' c(...)  # S3 method for class 'AmigaBitmapFont' c(..., name = \"font\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple AmigaFFH objects — c","text":"... Either AmigaBasic() AmigaBitmapFont() class objects. case AmigaBitmapFont() objects: AmigaBitmapFont() object unique Y-size. name argument valid ... one AmigaBitmapFont() class objects. character string specifying name needs applied font set. unspecified, default name 'font' used. Note name also used file name writing font file. make sure name also valid file name. checked may thus result errors.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple AmigaFFH objects — c","text":"Returns AmigaBitmapFontSet() AmigaBitmapFont() objects combined. AmigaBasic() objects combined, AmigaBasic() object returned lines Amiga Basic code combined.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/c.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine multiple AmigaFFH objects — c","text":"case ... one AmigaBasic() class objects: AmigaBasic() class objects combined single AmigaBasic() class object order given argument function. purpose lines Amiga Basic codes simply concatenated. case ... one AmigaBitmapFont() class objects: AmigaBitmapFontSet() class objects can hold multiple AmigaBitmapFont() class objects. Use method combine font bitmaps font set. Make sure bitmap represents unique font height (pixels). heights duplicated error thrown. can also specify name font, embeded object. name also used file name writing font file, make sure valid filename.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/c.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine multiple AmigaFFH objects — c","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple AmigaFFH objects — c","text":"","code":"data(font_example)  ## first get some AmigaBitmapFont objects: font8 <- getAmigaBitmapFont(font_example, 8) font9 <- getAmigaBitmapFont(font_example, 9)  ## now bind these bitmaps again in a single set font.set <- c(font8, font9, name = \"my_font_name\")  ## Amiga Basic codes can also be combined: bas1 <- as.AmigaBasic(\"LET a = 1\") bas2 <- as.AmigaBasic(\"PRINT a\") bas  <- c(bas1, bas2)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/check.names.AmigaBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","title":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","text":"Check Amiga Basic label/variable names validity","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/check.names.AmigaBasic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","text":"","code":"check.names.AmigaBasic(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/check.names.AmigaBasic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","text":"x vector character strings need checked ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/check.names.AmigaBasic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","text":"data.frame logical values number rows length x. Columns data.frame corresponds criteria listed details. FALSE invalid names.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/check.names.AmigaBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","text":"Names variables labels adhere following rules Amiga Basic: Length names range 1 255 character Names AmigaBasic.reserved() words Names contain alphanumeric characters periods contain special characters (.e., reserved type definition, dollar- percentage sign) Names start numeric character function tests names criteria.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/check.names.AmigaBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/check.names.AmigaBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Amiga Basic label/variable names for validity — check.names.AmigaBasic","text":"","code":"## These are valid names in Amiga Basic: check.names.AmigaBasic(c(\"Foo\", \"Bar\")) #>     duplicated length reserved characters start #> Foo      FALSE  FALSE    FALSE      FALSE FALSE #> Bar      FALSE  FALSE    FALSE      FALSE FALSE  ## Reserved words and repeated names are not allowed:  check.names.AmigaBasic(c(\"Print\", \"Foo\", \"Foo\")) #>       duplicated length reserved characters start #> Print      FALSE  FALSE     TRUE      FALSE FALSE #> Foo        FALSE  FALSE    FALSE      FALSE FALSE #> Foo.1       TRUE  FALSE    FALSE      FALSE FALSE"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/colourToAmigaRaw.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","title":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","text":"Convert colours Amiga compatible raw data vice versa, can used graphical objects Commodore Amiga.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/colourToAmigaRaw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","text":"","code":"colourToAmigaRaw(   x,   colour.depth = c(\"12 bit\", \"24 bit\"),   n.bytes = c(\"2\", \"3\") )  amigaRawToColour(   x,   colour.depth = c(\"12 bit\", \"24 bit\"),   n.bytes = c(\"2\", \"3\") )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/colourToAmigaRaw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","text":"x case amigaRawToColour called, x vector raw data. length vector multiple 2 (n.bytes = \"2\") 3 (n.bytes = \"3\"). colourToAmigaRaw called, x character strings representing colour. colour.depth character string: \"12 bit\" (default) \"24 bit\". first used cases, old Amigas 12 bit colour depth. n.bytes character string: \"2\" \"3\". number bytes used used store colour.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/colourToAmigaRaw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","text":"case amigaRawToColour called, (vector ) colour character string(s) returned. colourToAmigaRaw called, raw representing colour(s) specified x returned.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/colourToAmigaRaw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","text":"original Commodore Amiga chipset, graphics used indexed palettes 12 bit colours. Colours specified RGB (Red, Green Blue) values, component requiring 4 bits (corresponding values ranging 0 15). Data structures Amiga WORD (2 bytes) aligned. Colours therefore typically stored either 2 bytes (skipping first four bits) 3 bytes (one byte value). functions can used convert R colours closest matching Amiga colour raw format, vice versa. Note later Amiga models advanced (graphics) architecture (known AA AGA) allowed 24 bit colours.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/colourToAmigaRaw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/colourToAmigaRaw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert colours to Amiga compatible raw data or vice versa — colourToAmigaRaw","text":"","code":"## Let's create some Amiga palettes: colourToAmigaRaw(c(\"red\", \"navy blue\", \"brown\", \"#34AC5A\")) #> [1] 0f 00 00 08 0a 22 03 a5  ## let's do the reverse. ## this is white: amigaRawToColour(as.raw(c(0x0f, 0xff))) #> [1] \"#FFFFFF\"  ## this is white specified in 3 bytes: amigaRawToColour(as.raw(c(0xf0, 0xf0, 0xf0)), n.bytes = \"3\") #> [1] \"#FFFFFF\"  ## lower nybbles are ignored, you will get a warning when it is not zero: # \\donttest{ amigaRawToColour(as.raw(c(0xf0, 0xf0, 0x0f)), n.bytes = \"3\") #> Warning: The low nybble is not zero for all colours. #> [1] \"#FFFF00\" # }"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":null,"dir":"Reference","previous_headings":"","what":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"Use lossy delta-Fibonacci (de)compression continuous 8-bit signals. algorithm used compress 8-bit audio wave data Amiga.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"","code":"deltaFibonacciCompress(x, ...)  deltaFibonacciDecompress(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"x vector raw data needs (de)compressed. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"Returns vector resulting (de)compressed raw data.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"form compression lossy, meaning information quality get lost. 8-bit audio normally stored 8-bit signed value representing amplitude specific time intervals. delta-Fibonacci compression instead stores difference two time intervals (delta) 4-bit index. index turn represents value Fibonacci series (hence algorithm name). compression stores small delta values accurately, large delta values less accurately. sample stored 4-bit value instead 8-bit value, amount data reduced almost 50\\ algorithm first described Steve Hayes used 8SVX audio stored Interchange File Format (IFF). quality loss considerable (especially audio contained many large deltas) even time developed (1985) used much. function provided sake completeness. implementation compresses 8-bit data, 16-bit data quality loss considerable.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"https://en.wikipedia.org/wiki/Delta_encoding http://amigadev.elowar.com/read/ADCD_2.1/Devices_Manual_guide/node02D6.html","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/deltaFibonacciCompress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"(De)compress 8-bit continuous signals. — deltaFibonacciCompress","text":"","code":"## Let's get an audio wave from the ProTrackR package, which we ## can use in this example: buzz     <- ProTrackR::PTSample(ProTrackR::mod.intro, 1)  ## Let's convert it into raw data, such that we can compress it: buzz.raw <- as.integer(ProTrackR::waveform(buzz) - 128) |>   bitwAnd(0xFF) |>   as.raw()  ## Let's compress it: buzz.compress <- deltaFibonacciCompress(buzz.raw)  ## Look the new data uses less memory: length(buzz.compress)/length(buzz.raw) #> [1] 0.5019231  ## The compression was lossy, which we can examine by decompressing the ## sample again: buzz.decompress <- deltaFibonacciDecompress(buzz.compress)  ## And turn the raw data into numeric data: buzz.decompress <-   ifelse(buzz.decompress > 0x7f, as.integer(buzz.decompress) - 256L,          as.integer(buzz.decompress))  ## Plot the original wave in black, the decompressed wave in blue ## and the error in red (difference between the original and decompressed ## wave). The error is actually very small here. plot(ProTrackR::waveform(buzz) - 128, type = \"l\") lines(buzz.decompress, col = \"blue\") buzz.error <- ProTrackR::waveform(buzz) - 128 - buzz.decompress lines(buzz.error, col = \"red\")   ## this can also be visualised by plotting the orignal wave data against ## the decompressed data (and observe a very good correlation): plot(ProTrackR::waveform(buzz) - 128, buzz.decompress)   ## Let's do the same with a sample of a snare drum, which has larger ## delta values: snare.drum <- ProTrackR::PTSample(ProTrackR::mod.intro, 2)  ## Let's convert it into raw data, such that we can compress it: snare.raw <- as.integer(ProTrackR::waveform(snare.drum) - 128L) |>   bitwAnd(0xFF) |>   as.raw()  ## Let's compress it: snare.compress <- deltaFibonacciCompress(snare.raw)  ## Decompress the sample: snare.decompress <- deltaFibonacciDecompress(snare.compress)  ## And turn the raw data into numeric data: snare.decompress <-   ifelse(snare.decompress > 0x7f, as.integer(snare.decompress) - 256L,          as.integer(snare.decompress))  ## Now if we make the same comparison as before, we note that the ## error in the decompressed wave is much larger than in the previous ## case (red line): plot(ProTrackR::waveform(snare.drum) - 128, type = \"l\") lines(snare.decompress, col = \"blue\") snare.error <- ProTrackR::waveform(snare.drum) - 128 - snare.decompress lines(snare.error, col = \"red\")   ## this can also be visualised by plotting the orignal wave data against ## the decompressed data (and observe a nice but not perfect correlation): plot(ProTrackR::waveform(snare.drum) - 128, snare.decompress)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":null,"dir":"Reference","previous_headings":"","what":"Image dithering — dither","title":"Image dithering — dither","text":"Dither intentional form noise applied image avoid colour banding reducing amount colours image. function applies dithering grDevices raster image.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image dithering — dither","text":"","code":"dither(x, method, ...)  # S3 method for class 'raster' dither(   x,   method = c(\"none\", \"floyd-steinberg\", \"JJN\", \"stucki\", \"atkinson\", \"burkse\", \"sierra\",     \"two-row-sierra\", \"sierra-lite\"),   palette,   mode = c(\"none\", \"HAM6\", \"HAM8\"),   ... )  # S3 method for class 'matrix' dither(   x,   method = c(\"none\", \"floyd-steinberg\", \"JJN\", \"stucki\", \"atkinson\", \"burkse\", \"sierra\",     \"two-row-sierra\", \"sierra-lite\"),   palette,   mode = c(\"none\", \"HAM6\", \"HAM8\"),   ... )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image dithering — dither","text":"x Original image data needs dithered. raster object (grDevices::.raster()), matrix character string representing colours. method character string indicating dithering method applied. See usage section possible options (Note \"JJN\" Jarvis, Judice, Ninke algorithm). Default \"none\", meaning dithering applied. ... Currently ignored. palette palette image dithered. vector character strings representing colours. mode character string indicating whether special Amiga display mode used dithering. default ‘none’ used (special mode). addition, ‘HAM6’ ‘HAM8’ supported. See rasterToBitmap() details.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image dithering — dither","text":"Returns matrix dimensions x containing numeric index values. corresponding palette returned attribute, well index value fully transparent colour palette.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image dithering — dither","text":"approaches implemented use error diffusion achieve dithering. pixel scanned (top bottom, left right), actual colour sampled compared closest matching colour palette. error (differences actual used colour) distributed surrounding pixels. difference methods implemented way error distributed. algorithm identical. details consult listed references. method results best quality image depend original image palette colours used dithering, also matter taste. Note dithering algorithm relatively slow provided package convenience. main scope package use dedicated software faster/better results.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Image dithering — dither","text":"R.W. Floyd, L. Steinberg, adaptive algorithm spatial grey scale. Proceedings Society Information Display 17, 75-77 (1976). J. F. Jarvis, C. N. Judice, W. H. Ninke, survey techniques display continuous tone pictures bilevel displays. Computer Graphics Image Processing, 5:1:13-40 (1976). https://en.wikipedia.org/wiki/Floyd-Steinberg_dithering https://tannerhelland.com/4660/dithering-eleven-algorithms-source-code/","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Image dithering — dither","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/dither.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image dithering — dither","text":"","code":"## first: Let's make a raster out of the 'volcano' data, which we can use in the example: volcano.raster <- as.raster(t(matrix(terrain.colors(1 + diff(range(volcano)))[volcano -   min(volcano) + 1], nrow(volcano))))  ## let's dither the image, using a predefined two colour palette: volcano.dither <- dither(volcano.raster,                          method = \"floyd-steinberg\",                          palette = c(\"yellow\", \"green\"))  ## Convert the indices back into a raster object, such that we can plot it: volcano.dither <- as.raster(apply(volcano.dither, 2, function(x) c(\"yellow\", \"green\")[x])) par(mfcol = c(1, 2)) plot(volcano.raster, interpolate = FALSE) plot(volcano.dither, interpolate = FALSE)   ## results will get better when a better matching colour palette is used. ## for that purpose use the function 'index.colours'."},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/fontName.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace a font name — fontName","title":"Extract or replace a font name — fontName","text":"Extract replace font name AmigaBitmapFontSet() object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/fontName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace a font name — fontName","text":"","code":"fontName(x)  fontName(x) <- value"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/fontName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace a font name — fontName","text":"x AmigaBitmapFontSet() font name needs changed. value character string specifying name wish use font.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/fontName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace a font name — fontName","text":"Returns font name. case replace function, copy x returned name replaced 'value'.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/fontName.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or replace a font name — fontName","text":"name font embeded multiple locations AmigaBitmapFontSet() object. function can used extract replace font name correctly. also name used writing font file write.AmigaBitmapFontSet().","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/fontName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract or replace a font name — fontName","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/fontName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or replace a font name — fontName","text":"","code":"data(font_example)  ## show the name of the example font: fontName(font_example) #> [1] \"AmigaFFH\"  ## This is how you change the name into \"foo\" fontName(font_example) <- \"foo\"  ## see it worked: fontName(font_example) #> [1] \"foo\""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/font_example.html","id":null,"dir":"Reference","previous_headings":"","what":"An example object for the AmigaBitmapFontSet class — font_example","title":"An example object for the AmigaBitmapFontSet class — font_example","text":"example object AmigaBitmapFontSet() class used examples throughout package. also contains nested AmigaBitmapFont() class objects, can obtain using getAmigaBitmapFont(font_example, 9).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/font_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example object for the AmigaBitmapFontSet class — font_example","text":"font_example AmigaBitmapFontSet() object. details see object class documentation.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/font_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An example object for the AmigaBitmapFontSet class — font_example","text":"font_example contains font designed example package. holds bitmap glyphs 8 9 pixels tall characters.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/font_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example object for the AmigaBitmapFontSet class — font_example","text":"","code":"data(\"font_example\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getAmigaBitmapFont.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","title":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","text":"Extract specific AmigaBitmapFont() AmigaBitmapFontSet().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getAmigaBitmapFont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","text":"","code":"getAmigaBitmapFont(x, size)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getAmigaBitmapFont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","text":"x AmigaBitmapFontSet() object, specific AmigaBitmapFont() object needs extracted. size single numeric value specifying desired font size pixels. Use availableFontSizes() get available sizes.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getAmigaBitmapFont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","text":"Returns AmigaBitmapFont() requested size. error thrown requested size available.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getAmigaBitmapFont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","text":"AmigaBitmapFontSet() object can hold one bitmaps specific font sizes (heights). Use function obtain specific AmigaBitmapFont().","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getAmigaBitmapFont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getAmigaBitmapFont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a specific AmigaBitmapFont from a AmigaBitmapFontSet — getAmigaBitmapFont","text":"","code":"data(font_example)  ## get the font object for the first available size: font <- getAmigaBitmapFont(font_example,                            availableFontSizes(font_example)[1])"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getIFFChunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","title":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","text":"IFFChunk()s can nested tree-like structure. Use method get specific chunk specific label.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getIFFChunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","text":"","code":"# S4 method for class 'IFFChunk,character,integer' getIFFChunk(x, chunk.path, chunk.number)  # S4 method for class 'IFFChunk,character,missing' getIFFChunk(x, chunk.path, chunk.number)  # S4 method for class 'IFFChunk,character,missing,IFFChunk' getIFFChunk(x, chunk.path, chunk.number = NULL) <- value  # S4 method for class 'IFFChunk,character,integer,IFFChunk' getIFFChunk(x, chunk.path, chunk.number = NULL) <- value"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getIFFChunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","text":"x IFFChunk() object nested IFFChunk() extracted returned. chunk.path vector 4 character long strings IFF chunk labels, specifying path target IFF chunk. example: c(\"ILBM\", \"BODY\") means, get \"BODY\" chunk inside \"ILBM\" chunk. chunk.number vector length chunk.path, integer index numbers. Sometimes chunk can contain list chunks label. argument can specify element returned. default (missing), first element always returned. value IFFChunk() target chunk replaced. Make sure value chunk.type last chunk specified chunk.path.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getIFFChunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","text":"Returns IFFChunk() object nested inside x specified path. case replace method original chunk x returned target chunk replaced value.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getIFFChunk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","text":"IFFChunk objects 4 character identifiers, indicating type chunk dealing . chunks can nested inside . Use method extract specific chunks referring respective identifiers. identifiers shown calling print IFFChunk(). specified path exist, method throws `subscript range' error.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getIFFChunk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/getIFFChunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a specific IFFChunk nested inside other IFFChunks — getIFFChunk","text":"","code":"## load an IFF file example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## Get the BMHD (bitmap header) from the ILBM (interleaved bitmap) chunk: bmhd <- getIFFChunk(example.iff, c(\"ILBM\", \"BMHD\"))  ## This is essentially doing the same thing, but we now explicitly ## tell the method to get the first element for each specified label: bmhd <- getIFFChunk(example.iff, c(\"ILBM\", \"BMHD\"), c(1L, 1L))  ## Let's modify the bitmap header and replace it in the parent IFF chunk. bmhd.itpt <- interpretIFFChunk(bmhd)  ## Let's disable the masking, the bitmap will no longer be transparent: bmhd.itpt$Masking <- \"mskNone\" bmhd <- IFFChunk(bmhd.itpt)  ## Now replace the header from the original iff with the modified header: getIFFChunk(example.iff, c(\"ILBM\", \"BMHD\")) <- bmhd"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/hardwareSprite-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The hardwareSprite class — hardwareSprite-class","title":"The hardwareSprite class — hardwareSprite-class","text":"S4 class object represent graphical objects known hardware sprites Commodore Amiga.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/hardwareSprite-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The hardwareSprite class — hardwareSprite-class","text":"Amiga hardware supported sprites, graphical objects moved around display independently . Basic sprites 16 pixels wide number pixels high composed four colours, one transparent. complex sprites formed linking separate sprites together. way, sprites become wider, composed colours. extended sprites currently supported package. well known example hardware sprite Commodore Amiga mouse pointer. object simply holds basic information belonging hardware sprite. Use .raster() convert raster useful graphical element R.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/hardwareSprite-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The hardwareSprite class — hardwareSprite-class","text":"VStart vertical starting position sprite. HStart horizontal starting position sprite. VStop vertical stopping position sprite. height sprite given VStart - VStop. control.bits 8 logical values used extending sprites. values stored objects extending sprites (yet) supported. bitmap Interleaved bitmap data containing information pixel colour numbers sprite. colours vector 3 colours used sprite. end..data Sprite data can followed another sprite. terminated two WORDS equalling zero (raw(4)). Repeated sprite data currently supported.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/hardwareSprite-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The hardwareSprite class — hardwareSprite-class","text":"http://amigadev.elowar.com/read/ADCD_2.1/Hardware_Manual_guide/node00AE.html","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/hardwareSprite-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The hardwareSprite class — hardwareSprite-class","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/hardwareSprite-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The hardwareSprite class — hardwareSprite-class","text":"","code":"## This generates a sprite of a single line (16x1 pixels) with an empty bitmap: new(\"hardwareSprite\") #> A 1 row high hardware sprite sprite  ## This generates a sprite of a single line (16x1 pixels) where ## the bitmap contains some coloured pixels: new(\"hardwareSprite\", bitmap = as.raw(c(0x01,0x02,0x03,0x04))) #> A 1 row high hardware sprite sprite  ## This generates a sprite of 16x16 pixels: new(\"hardwareSprite\",     VStop = 16,     bitmap = as.raw(sample.int(255, 64, replace = TRUE))) #> A 16 row high hardware sprite sprite"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ilbm8lores.iff.html","id":null,"dir":"Reference","previous_headings":"","what":"An example file of a bitmap image stored in the Interchange File Format — ilbm8lores.iff","title":"An example file of a bitmap image stored in the Interchange File Format — ilbm8lores.iff","text":"file provided demonstrate structure Interchange File Format used several examples throughout package.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ilbm8lores.iff.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An example file of a bitmap image stored in the Interchange File Format — ilbm8lores.iff","text":"See IFFChunk-class() references information Interchange File Format.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ilbm8lores.iff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An example file of a bitmap image stored in the Interchange File Format — ilbm8lores.iff","text":"Interchange File Format stores information compartmentally separate containers called 'chunks'. file demonstrates bitmap image stored format. addition raw bitmap data, file also contains meta-information bitmap dimensions, colour palette display mode used Amiga. See also interpretIFFChunk(), IFFChunk-class() example bitmapToRaster().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ilbm8lores.iff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"An example file of a bitmap image stored in the Interchange File Format — ilbm8lores.iff","text":"https://en.wikipedia.org/wiki/Interchange_File_Format https://wiki.amigaos.net/wiki/A_Quick_Introduction_to_IFF","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/ilbm8lores.iff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An example file of a bitmap image stored in the Interchange File Format — ilbm8lores.iff","text":"","code":"filename <- system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\") example.iff <- read.iff(filename)  ## show the structure of the IFF file: print(example.iff) #> - FORM #>   - ILBM #>     - BMHD #>     - CMAP #>     - CAMG #>     - BODY"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/index.colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantisation of colours and indexing a grDevices raster image — index.colours","title":"Quantisation of colours and indexing a grDevices raster image — index.colours","text":"Converts image represented grDevices raster object matrix containing numeric indices quantised colour palette.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/index.colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantisation of colours and indexing a grDevices raster image — index.colours","text":"","code":"index.colours(   x,   length.out = 8,   palette = NULL,   background = \"#FFFFFF\",   dither = c(\"none\", \"floyd-steinberg\", \"JJN\", \"stucki\", \"atkinson\", \"burkse\", \"sierra\",     \"two-row-sierra\", \"sierra-lite\"),   colour.depth = c(\"12 bit\", \"24 bit\"),   ... )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/index.colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantisation of colours and indexing a grDevices raster image — index.colours","text":"x raster object (grDevices::.raster()), matrix containing character strings representing colours. x can also list matrices rasters. elements list identical dimensions. overall palette generated elements list. length.numeric value indicating number desired colours indexed palette. can also character string indicating special Amiga display mode used indexing colours. ‘HAM6’ ‘HAM8’ supported. See rasterToBitmap() details special modes. palette vector length.colours, used bitmap image. missing set NULL, palette generated based provided colours raster x. case, stats::kmeans() used hue, saturation, brightness alpha values colours x clustering colours. cluster centres used palette colours. background Amiga, indexed images semi-transparent. single colour designated fully transparent. “background`' argument contain background colour semi-transparent colours mixed, colour quantisation. white default. dither Dither output image using algorithm specified . See usage section possible options. default dithering (\"none\") applied. See dither() details. colour.depth character string indicating colour depth used. Can either \"12 bit\" (default, standard Amiga original chipset), \"24 bit\". argument overruled length.set “HAM6” “HAM8”. case colour depth linked special mode used (12 bit HAM6, 24 bit HAM8). ... Arguments passed onto stats::kmeans() (see palette argument).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/index.colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantisation of colours and indexing a grDevices raster image — index.colours","text":"Returns matrix dimensions x containing numeric index values. corresponding palette returned attribute, well index value fully transparent colour palette. x list list matrices returned.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/index.colours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantisation of colours and indexing a grDevices raster image — index.colours","text":"Determines optimal limited palette clustering colours image stats::kmeans(). result optimisation routine depend randomly chosen cluster centres algorithm. means result may slightly differ call function. want reproducible results, may want reset random seed (set.seed()) call function.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/index.colours.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantisation of colours and indexing a grDevices raster image — index.colours","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/index.colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantisation of colours and indexing a grDevices raster image — index.colours","text":"","code":"## first: Let's make a raster out of the 'volcano' data, which we can use in the example: volcano.raster <- as.raster(t(matrix(terrain.colors(1 + diff(range(volcano)))[volcano -   min(volcano) + 1], nrow(volcano))))  ## This will create an image of the original raster using an indexed palette: volcano.index <- index.colours(volcano.raster)  ## The index values can be converted back into colours, using the palette: volcano.index <- as.raster(apply(volcano.index, 2,                                  function(x) attributes(volcano.index)$palette[x]))  ## Create an indexed image using dithering volcano.dith <- index.colours(volcano.raster, dither = \"floyd-steinberg\") volcano.dith <- as.raster(apply(volcano.dith, 2,                                 function(x) attributes(volcano.dith)$palette[x]))  ## plot the images side by side for comparison par(mfcol = c(1, 3)) plot(volcano.raster, interpolate = FALSE) plot(volcano.index, interpolate = FALSE) plot(volcano.dith, interpolate = FALSE)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/interpretIFFChunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpret an IFFChunk object — interpretIFFChunk","title":"Interpret an IFFChunk object — interpretIFFChunk","text":"IFFChunk()s represent structure Interchange File Format well, iformation stored raw data. method tries interpret translate information comprehensive format.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/interpretIFFChunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpret an IFFChunk object — interpretIFFChunk","text":"","code":"# S4 method for class 'IFFChunk' interpretIFFChunk(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/interpretIFFChunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpret an IFFChunk object — interpretIFFChunk","text":"x IFFChunk() object needs interpreted. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/interpretIFFChunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpret an IFFChunk object — interpretIFFChunk","text":"x interpretable package S3 class object IFF.returned. content returned object depend type IFFChunk() provided x. result can instance raster image (grDevices::.raster()), list audio tuneR::Wave()s, character string named list.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/interpretIFFChunk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpret an IFFChunk object — interpretIFFChunk","text":"Interchange File Format chunks can hold kind information (images, audio, (formatted) text, etc.). method try convert information something useful. Information may get lost translation, careful converting back IFFChunk-class() object using IFFChunk-method(). error thrown IFFChunk() object currently interpretable package. See IFFChunk-method() overview currently supported IFF chunks. list may increase package matures.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/interpretIFFChunk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Interpret an IFFChunk object — interpretIFFChunk","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/interpretIFFChunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpret an IFFChunk object — interpretIFFChunk","text":"","code":"## load an IFF file example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## in this case, the file is a FORM container with a bitmap image, and a ## list with a raster object is returned when interpreted: example.itpt <- interpretIFFChunk(example.iff) class(example.itpt) #> [1] \"IFF.FORM\" \"IFF.ANY\"  typeof(example.itpt) #> [1] \"list\" class(example.itpt[[1]]) #> [1] \"IFF.ILBM\" \"IFF.ANY\"  \"raster\"    ## Let's extraxt the bitmap header from the main chunk: bmhd <- getIFFChunk(example.iff, c(\"ILBM\", \"BMHD\"))  ## When interpreted, a named list is returned with (meta-)information ## on the bitmap image: bmhd.itpt <- interpretIFFChunk(bmhd) class(bmhd.itpt) #> [1] \"IFF.BMHD\" \"IFF.ANY\"  typeof(bmhd.itpt) #> [1] \"list\" print(bmhd.itpt) #> $w #> [1] 320 #>  #> $h #> [1] 200 #>  #> $x #> [1] 0 #>  #> $y #> [1] 0 #>  #> $nPlanes #> [1] 3 #>  #> $Masking #> [1] \"mskHasTransparentColour\" #>  #> $Compression #> [1] \"cmpByteRun1\" #>  #> $pad #> [1] 00 #>  #> $transparentColour #> [1] 0 #>  #> $xAspect #> [1] 44 #>  #> $yAspect #> [1] 44 #>  #> $pageWidth #> [1] 320 #>  #> $pageHeight #> [1] 200 #>  #> attr(,\"class\") #> [1] \"IFF.BMHD\" \"IFF.ANY\""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/names.AmigaBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","title":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","text":"binary Amiga Basic files, names labels variables code stored end file. encoded pointer index name list. Use function list, select replace names included code","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/names.AmigaBasic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","text":"","code":"# S3 method for class 'AmigaBasic' names(x)  # S3 method for class 'AmigaBasic' names(x) <- value"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/names.AmigaBasic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","text":"x AmigaBasic()-class object obtain change variable /label names value (vector ) character string desired replacement variable/label names.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/names.AmigaBasic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","text":"vector character strings label variable names basic script. case replacement method AmigaBasic()-class replaced names returned.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/names.AmigaBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","text":"Make sure variable label names valid basic script (see check.names.AmigaBasic).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/names.AmigaBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/names.AmigaBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract or replace variable and label names from Amiga Basic scripts — names.AmigaBasic","text":"","code":"## Let's create some Basic code with labels and variables: bas <- as.AmigaBasic(c(   \"REM - This will loop forever...\",   \"my.label:\",   \"  my.variable% = 0\",   \"  WHILE my.variable% < 10\",   \"    my.variable% = my.variable% + 1\",   \"  WEND\",   \"  GOTO my.label\" ))  ## list the names in the script above: names(bas) #> [1] \"my.label\"    \"my.variable\"  ## change the first name: names(bas)[1] <- \"better.label\""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":null,"dir":"Reference","previous_headings":"","what":"A routine to (un)pack bitmap data — packBitmap","title":"A routine to (un)pack bitmap data — packBitmap","text":"simplistic lossless routine (un)pack repetitive bitmap data. Often used InterLeaved BitMap (ILBM) images IFF containers (IFFChunk()).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A routine to (un)pack bitmap data — packBitmap","text":"","code":"packBitmap(x)  unPackBitmap(x)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A routine to (un)pack bitmap data — packBitmap","text":"x raw data, usually representing (packed) bitmap.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A routine to (un)pack bitmap data — packBitmap","text":"Returns packed unpacked raw data, depending whether packBitmap unPackBitmap called.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A routine to (un)pack bitmap data — packBitmap","text":"InterLeaved BitMap (ILBM) images Amiga often use packing algorithm referred `ByteRun1'. routine introduced first Macintosh called PackBits. form run-length encoding simple: specific byte repeated bitmap, replaced (signed negative) byte telling many times following byte repeated. series bytes repetitive, preceded (signed positive) byte telling long non repetitive part . complicated, images bytes can shaved file. useful everything stored 880 kilobyte floppy disks little CPU time spare. Note file size can also increase (noisy) images. packing routine pack entire bitmap (x) . IFF file format requires packing bitmap data per scanline. done automatically rasterToIFF() function, calls packing routine per scanline.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"A routine to (un)pack bitmap data — packBitmap","text":"http://amigadev.elowar.com/read/ADCD_2.1/Devices_Manual_guide/node01C0.html https://en.wikipedia.org/wiki/PackBits","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A routine to (un)pack bitmap data — packBitmap","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/packBitmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A routine to (un)pack bitmap data — packBitmap","text":"","code":"## generate some random raw data: dat.rnd <- as.raw(sample.int(10, 100, TRUE))  ## try to pack it: pack.rnd <- packBitmap(dat.rnd)  ## due to the random nature of the source data ## the data could not be packed efficiently. ## The length of the packed data is close to ## the length of the original data: length(pack.rnd) - length(dat.rnd) #> [1] 1  ## Now generate similar data but sort it ## to generate more repetitive data: dat.srt  <- as.raw(sort(sample.int(10, 100, TRUE))) pack.srt <- packBitmap(dat.srt)  ## This time the packing routing is more successful: length(pack.srt) - length(dat.srt) #> [1] -80  ## The original data can always be obtained ## from the packed data: all(dat.rnd == unPackBitmap(pack.rnd)) #> [1] TRUE all(dat.srt == unPackBitmap(pack.srt)) #> [1] TRUE"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/play.html","id":null,"dir":"Reference","previous_headings":"","what":"Playing Amiga audio data — play","title":"Playing Amiga audio data — play","text":"wrapper tuneR package's tuneR::play() routine. Allowing play Amiga audio (instance stored 8SVX Interchange File Format).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/play.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Playing Amiga audio data — play","text":"","code":"# S4 method for class 'ANY' play(object, player = NULL, ...)  # S4 method for class 'IFFChunk' play(object, player = NULL, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/play.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Playing Amiga audio data — play","text":"object IFFChunk-class() object needs played. IFFChunk() type FORM, containing 8SVX chunk, 8SVX . object can also class IFF.FORM IFF.8SVX. See tuneR::play() objects can played. player Path external audio player. See tuneR::play() details. ... Arguments passed onto tuneR play() routine.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/play.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Playing Amiga audio data — play","text":"Returns list data returned tuneR's tuneR::play(), output undocumented.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/play.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Playing Amiga audio data — play","text":"wrapper tuneR package's tuneR::play() routine. try play audio using external audio player. 8SVX audio played, octave played separately. FORM container contains multiple 8SVX samples, also played successively. Note separate package developed interpret play ProTracker modules samples (ProTrackR()).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/play.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Playing Amiga audio data — play","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/play.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Playing Amiga audio data — play","text":"","code":"## First get an audio sample from the ProTrackR package snare.samp <- ProTrackR::PTSample(ProTrackR::mod.intro, 2)  ## Coerce it into an IFFChunk object: snare.iff <- WaveToIFF(snare.samp)  ## Play the 8SVX sample: if (interactive()) {   play(snare.iff) }"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot AmigaFFH objects — plot.AmigaBasicShape","title":"Plot AmigaFFH objects — plot.AmigaBasicShape","text":"Plot AmigaFFH objects using base plotting routines.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot AmigaFFH objects — plot.AmigaBasicShape","text":"","code":"# S3 method for class 'AmigaBasicShape' plot(x, y, ...)  # S3 method for class 'AmigaBitmapFont' plot(x, y, ...)  # S3 method for class 'AmigaBitmapFontSet' plot(x, y, ...)  # S3 method for class 'hardwareSprite' plot(x, y, ...)  # S3 method for class 'IFFChunk' plot(x, y, ...)  # S3 method for class 'IFF.FORM' plot(x, y, ...)  # S3 method for class 'IFF.8SVX' plot(x, y, ...)  # S3 method for class 'IFF.ILBM' plot(x, y, ...)  # S3 method for class 'IFF.ANIM' plot(x, y, ...)  # S3 method for class 'SysConfig' plot(x, y, ...)  # S3 method for class 'AmigaIcon' plot(x, y, asp = 2, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot AmigaFFH objects — plot.AmigaBasicShape","text":"x AmigaFFH object plotted. See usage section supported object classes. x AmigaBitmapFont() AmigaBitmapFontSet() class object, plot full bitmap used extract font glyphs. y x AmigaIcon() class object, y can used index. case, y=1 first icon image shown. y=2 selected icon image shown. x AmigaBitmapFontSet() class object, y can used plot bitmap specific font height (y). x AmigaBasicShape() class object, y can used select specific layer shape plot, can one \"bitmap\", \"shadow\" \"collision\". ... Parameters passed onto generic graphics plotting routine. x AmigaBitmapFont() AmigaBitmapFontSet() object, '...' can also used arguments need passed onto .raster() function. asp numeric value indicating aspect ratio plot. many AmigaFFH, aspect ratio based Amiga display mode known. AmigaIcon() objects default aspect ratio 2 used (tall pixels). x AmigaBitmapFont() AmigaBitmapFontSet() object, aspect ratio 1 used default. TALLDOT flag set font, aspect ratio s multiplied 2. WIDEDOT flag set, divided 2. custom aspect ratio can also used override ratios specified .","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot AmigaFFH objects — plot.AmigaBasicShape","text":"Returns NULL silently.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot AmigaFFH objects — plot.AmigaBasicShape","text":"plotting routine implemented AmigaFFH objects. See usage section supported objects.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot AmigaFFH objects — plot.AmigaBasicShape","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot AmigaFFH objects — plot.AmigaBasicShape","text":"","code":"## load an IFF file example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## and plot it: plot(example.iff)   ## AmigaIcons can also be plotted: plot(simpleAmigaIcon())   ## As can the cursor from a SysConfig object: plot(simpleSysConfig())   ## As can Amiga fonts: data(font_example) plot(font_example)  plot(font_example, text = \"foo bar\", style = \"underlined\", interpolate = FALSE)   ## As can AmigaBasicShapes: ball <- read.AmigaBasicShape(system.file(\"ball.shp\", package = \"AmigaFFH\")) plot(ball)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBasicShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","title":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","text":"Convert raster() object AmigaBasicShape() class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBasicShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","text":"","code":"rasterToAmigaBasicShape(   x,   type = c(\"blitter object\", \"sprite\"),   palette,   shadow,   collision,   ... )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBasicShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","text":"x raster() class object convert AmigaBasicShape() class obejct. type character string indicating type graphic needs created: \"blitter object\" (default) \"sprite\". palette vector character strings, element represents colour. palette used quantize colours occur raster x. shadow optional layer stored graphics. layer used specific shadow effects blitting graphics screen. needs raster() object consisting colours black (bit unset) white (bit set). raster needs dimensions x. layer omitted argument omitted (set NULL). collision optional layer stored graphics. layer used collision detection graphical objects. needs raster() object consisting colours black (bit unset) white (bit set). raster needs dimensions x. layer omitted argument omitted (set NULL). ... Arguments passed onto index.colours(). Can used, instance, achieve specific dithering effects.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBasicShape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","text":"Returns AmigaBasicShape() class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBasicShape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","text":"method can used turn graphics AmigaBasicShape() class object. order , colours input image (raster() object) quantized limited palette. palette can forced argument function. Otherwise, based input image.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBasicShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBasicShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a grDevices raster object into an AmigaBasicShape class object. — rasterToAmigaBasicShape","text":"","code":"## get a raster image: ilbm <- as.raster(read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\")))  ## convert to an Amiga Basic blitter object: bob <- rasterToAmigaBasicShape(ilbm, \"blitter object\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBitmapFont.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","title":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","text":"Convert two-coloured grDevices::.raster() image AmigaBitmapFont() class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBitmapFont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","text":"","code":"rasterToAmigaBitmapFont(   x,   glyphs,   default_glyph,   baseline,   glyph_width,   glyph_space,   glyph_kern,   palette,   ... )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBitmapFont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","text":"x raster (see grDevices package) object composed two colours . Make sure glyphs (graphical representation characters) next eachother single line. height raster (pixels) taken automatically font height. glyphs Specify glyphs included image x left right. can specified one following ways: single character string, length string (nchar) equals number displayed glyphs x. vector numeric ASCII codes. length vector equal number displayed glyphs x. list either character strings vector numerics.  length list equal number displayed glyphs x. element can represent multiple characters, meaning nth element list uses nth glyph shown x represent characters included element. Note Amiga bitmap fonts represent ASCII characters may include special characters symbols. default_glyph single character ASCII code (numeric) used default. means characters specified glyphs represented default_glyph. default_glyph included glyphs. baseline baseline font, specified number pixels top (numeric). whole number 0 font height (height x) minus 1. glyph_width numeric vector number elements characters used glyphs. specifies width pixels glyph reserved raster image x. whole numbers greater equal 0. glyph_space numeric vector number elements characters used glyphs. specifies width pixels glyph used formatting. text. Note values can smaller larger values specified glyph_width. whole numbers greater equal 0. glyph_kern Note Amiga bitmap fonts formal definition typography used kerning. , kerning used number pixels cursor moved forward backward typesetting character. numeric vector number elements characters used glyphs. can hold positive negative values. palette vector two colours. colours x. first colour used background colour, second foreground colour. missing, checked whether x palette attribute, uses . attribute also missing, palette guessed x, frequently occurring colour assumed background colour. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBitmapFont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","text":"Returns AmigaBitmapFont() class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBitmapFont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","text":"Create AmigaBitmapFont() class object providing two-coloured raster image specifying characters depicted image.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBitmapFont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToAmigaBitmapFont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a raster image into an AmigaBitmapFont — rasterToAmigaBitmapFont","text":"","code":"data(\"font_example\")  ## make a raster that we can use to create a bitmap font font9.rast <- as.raster(getAmigaBitmapFont(font_example, 9))  ## note the glyphs and the order in which they are included in ## the raster image: plot(font9.rast)   ## let's build a simple font, using only the first few glyphs ## in the raster: font9 <- rasterToAmigaBitmapFont(   ## 'x' needs the raster image:   x             = font9.rast,      ## 'glyphs' are the graphical representation of the characters   ## that we will include in our font. We will only use the   ## first 7 characters in the raster image:   glyphs        = \" !\\\"#$%&\",      ## We will use the '&' glyph to represent all characters that   ## are not specified in the font:   default_glyph = \"&\",      ## The raster image is 9 pixels tall, as will be the font.   ## Let's use 7 as the base (it needs to be less than the height)   baseline      = 7,      ## Let's define the width in pixels for each of the 7   ## characters. This is their width in the raster image:   glyph_width   = c(0, 1, 3, 6, 5, 5, 5),      ## Let's define the space the character should take in pixels   ## when it is used to format text:   glyph_space   = c(4, 2, 4, 7, 6, 6, 6),      ## the raster uses white as background colour and black as   ## foreground:   palette       = c(\"white\", \"black\") )  ## note that for all characters that are not specified, ## the default glyph ('&') is used: plot(font9, text = \"!@#$%ABCD\")   ## Let's take a subset from the font's bitmap (rasteer): font9abc.rast <- font9.rast[,263:282]  ## as you can see this bitmap only contains the lowercase ## characters 'a', 'b', 'c', 'd' and 'e': plot(font9abc.rast)   font9.abc <- rasterToAmigaBitmapFont(   x             = font9abc.rast,   ## Each glyph in the image can be represented by a single   ## element in a list. By specifying multiple characters in   ## each element, you can recycle a glyph to represent different   ## characters. So in this case, the glyph 'a' is used for   ## all the accented variants of the character 'a'.   glyphs        = list(\"a\\ue0\\ue1\\ue2\\ue3\\ue4\\ue5\",                        \"b\",                        \"c\\ua2\\ue7\",                        \"d\",                        \"e\\ue8\\ue9\\uea\\ueb\"),   default_glyph = \"c\", ## 'c' is used as default glyph for all other characters   baseline      = 7,   glyph_width   = c(4, 4, 4, 4, 4),   glyph_space   = c(5, 5, 5, 5, 5),   palette       = c(\"white\", \"black\") )  ## see what happens when you format text using the font we just created: plot(font9.abc, text = \"a\\uE0\\uE1\\uE2\\uE3\\uE4\\uE5\\uA2\\uE7\\uE8\\uE9\\uEA\\uEB, foo bar\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToBitmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","title":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","text":"Converts image represented grDevices raster object binary (Amiga) bitmap data.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToBitmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","text":"","code":"rasterToBitmap(x, depth = 3, interleaved = TRUE, indexing = index.colours)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToBitmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","text":"x raster object created grDevices::.raster() needs converted bitmap data. also possible let x matrix characters, representing colours. depth colour depth bitmap image. image composed 2^depth indexed colours. depth can also character string \"HAM6\" \"HAM8\" representing special Amiga display modes (see details). interleaved logical value, indicating whether bitmap needs interleaved. interleaved bitmap image stores consecutive bitmap layer per horizontal scanline. indexing function accepts two arguments: x (grDevices raster object); length., numeric value indicating desired size palette (.e., number colours). return matrix numeric palette indices (ranging 1 number colours palette). result attribute named palette' contains colours correspond index numbers. result also carry attribute name transparent', single numeric value representing colour palette treated transparent (NA transparency required). default function index.colours() used. free provide customised version function (see examples).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToBitmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","text":"bitmap returned vector logical values. logical values reflect bits bitplane. palette used bitmap returned attribute vector. also attribute called transparent'. hold numeric index corresponding colour palette treated transparent. NA` transparency used.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToBitmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","text":"Images represented grDevices raster objects virtually true colour (24 bit colour depth) alpha layer (transparency). early Amiga's chipset (combination memory restrictions) allowed images indexed palettes. colour depth 12 bit original chipset number colours allowed palette also depended chipset. function allow convert raster object binary bitmap data indexed palette. means image converted lossy way (information lost). expect result quality original image. depth argument, raster can also converted special mode bitmap images. One modes ‘hold modify’ (HAM). mode two bitplanes reserved modifier switches. switch equals zero, remainder bitplanes used index colours fixed palette. switch equals 1, 2 3, red, green blue component previous modified, using number remainder bitplanes. holds previous colour modifies one colour components (hence term ‘hold modify’.) HAM6 HAM8 mode implemented. HAM6 uses 6 bitplanes 12 bit colour depth, HAM8 uses 8 bitplanes 24 bit colour depth. HAM mode special video modes supported Amiga hardware. Normal mode bitmap images 6 bit depth allow palette 64 (2^6) colours, HAM6 can display 4096 colours bit depth. addition HAM6 HAM8, sliced HAM (SHAM) another HAM variant. Using coprocessor Amiga, possible change palette specific scanlines, increasing number available colours even . SHAM mode currently supported package.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToBitmap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToBitmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a grDevices raster object into binary bitmap data — rasterToBitmap","text":"","code":"## first: Let's make a raster out of the 'volcano' data, which we can use in the example: volcano.raster <- as.raster(t(matrix(terrain.colors(1 + diff(range(volcano)))[volcano -   min(volcano) + 1], nrow(volcano))))  ## convert the raster into binary (logical) bitmap data: volcano.bm <- rasterToBitmap(volcano.raster)  ## The palette for the indexed colours of the generated bitmap is returned as ## attribute. There is no transparency is the image: attributes(volcano.bm) #> $palette #> [1] \"#44BB00\" \"#77CC00\" \"#DDEE00\" \"#22BB00\" \"#00AA00\" \"#EEBB66\" \"#EECC22\" #> [8] \"#EECCAA\" #>  #> $transparent #> [1] NA #>   ## We can also include a custom function for colour quantisation. Let's include ## some dithering: volcano.dither <- rasterToBitmap(volcano.raster,                                  indexing = function(x, length.out) {                                    index.colours(x, length.out,                                                  dither = \"floyd-steinberg\")                                  })  ## You can also use a custom indexing function to force a specified palette, ## in this case black and white: volcano.bw <- rasterToBitmap(volcano.raster,                              indexing = function(x, length.out) {                                index.colours(x, length.out,                                              palette = c(\"black\", \"white\"),                                              dither = \"floyd-steinberg\")                              })  ## Make a bitmap using a special display mode (HAM6): volcano.HAM <- rasterToBitmap(volcano.raster, \"HAM6\")"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToHWSprite.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","title":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","text":"Convert grDevices raster object Amiga hardwareSprite class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToHWSprite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","text":"","code":"rasterToHWSprite(x, indexing = index.colours)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToHWSprite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","text":"x grDevices() raster object (grDevices::.raster()) needs converted hardwareSprite() class object. Note hardwareSprite() maximum width 16 pixels. x wider, cropped. indexing function accepts two arguments: x (grDevices raster object); length., numeric value indicating desired size palette (.e., number colours). return matrix numeric palette indices (ranging 1 number colours palette). result attribute named palette' contains colours correspond index numbers. result also carry attribute name transparent', single numeric value representing colour palette treated transparent (NA transparency required). default function index.colours() used.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToHWSprite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","text":"Returns hardwareSprite() class object based x","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToHWSprite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","text":"grDevices() raster image can converted hardwareSprite() class object function. purpose true-colour image converted indexed palette 4 colours. Amiga hardware sprite reserve one colours transparent. Thos function use fully transparent colours original image (.e., alpha level equals 0) purpose. image fully transparent colours, use frequently occuring colour (least default indexing function used).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToHWSprite.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToHWSprite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a raster object into an hardwareSprite object — rasterToHWSprite","text":"","code":"## first create a raster object that can be used as input ## (making sure that the background is transparent): rst <- as.raster(simpleSysConfig()$PointerMatrix, \"#AAAAAA00\")  ## now turn it into a hardware sprite: spr <- rasterToHWSprite(rst)  ## and plot it as a check: plot(spr)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToIFF.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","title":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","text":"Convert grDevices raster images (grDevices::.raster()) formal IFFChunk() object, interleaved bitmap (ILBM) image.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToIFF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","text":"","code":"rasterToIFF(   x,   display.mode = as.character(AmigaFFH::amiga_display_modes$DISPLAY_MODE),   monitor = as.character(AmigaFFH::amiga_monitors$MONITOR_ID),   anim.options,   ... )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToIFF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","text":"x raster object created grDevices::.raster() needs converted IFF formated bitmap image. also possible let x matrix characters, representing colours. display.mode Specify Amiga display mode used. See amiga_display_modes() possible options. \"LORES_KEY\" used default, lowest resolution possible Amiga. monitor Amiga monitor needs displayed. See amiga_monitors() details posible options. default \"DEFAULT_MONITOR_ID\" used. anim.options Currently ignored. argument potentitally implemented future versions package. Currently, animations always encoded \"ByteVerticalCompression\" package (x list raster objects). ... Arguments passed rasterToBitmap().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToIFF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","text":"Returns IFFChunk() object holding Interleaved Bitmap (ILBM) image based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToIFF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","text":"Convert modern image interleaved bitmap (image) conform Interchange File Format (IFF) specifications. original image true colour (.e., 24 bit colour depth) converted bitmap image indexed palette.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToIFF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rasterToIFF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a grDevices raster image into an IFF formated bitmap image — rasterToIFF","text":"","code":"## first: Let's make a raster out of the 'volcano' data, which we can use in the example: volcano.raster <- as.raster(t(matrix(terrain.colors(1 + diff(range(volcano)))[volcano -   min(volcano) + 1], nrow(volcano))))  ## Turning the raster into an IFFChunk object is easy: volcano.iff <- rasterToIFF(volcano.raster)  ## This object can be saved as an IFF file using write.iff  ## in special modes HAM6 and HAM 8 higher quality images ## can be obtained. See 'rasterToBitmap' for more info on the ## special HAM modes. volcano.ham <- rasterToIFF(volcano.raster, \"HAM_KEY\", depth = \"HAM8\")  ## The result can be further improved by applying dithering volcano.ham.dither <- rasterToIFF(volcano.raster, \"HAM_KEY\", depth = \"HAM8\",   indexing = function(x, length.out) {     index.colours(x, length.out, dither = \"JJN\", iter.max = 20)   })"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","title":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","text":"AmigaBasic() objects comprehensive representations binary-encode Amiga Basic scripts. Use function convert raw content encoded Amiga Basic scripts AmigaBasic() object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","text":"","code":"rawToAmigaBasic(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","text":"x vector raw data converted AmigaBasic() class object. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","text":"AmigaBasic() class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","text":"function convert raw data stored Amiga Basic files corresponding S3 AmigaBasic()-class object.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data into an AmigaBasic class object — rawToAmigaBasic","text":"","code":"## First create an AmigaBAsic object: bas <- as.AmigaBasic(\"PRINT \\\"Hello world!\\\"\")  ## Make it raw: bas.raw <- as.raw(bas)  ## Now convert it back to an AmigaBasic object: bas <- rawToAmigaBasic(bas.raw)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicBMAP.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","title":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","text":"Coerce raw data AmigaBasicBMAP() class object","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicBMAP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","text":"","code":"rawToAmigaBasicBMAP(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicBMAP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","text":"x vector raw data converted AmigaBasicBMAP() class object. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicBMAP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","text":"AmigaBasicBMAP() class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicBMAP.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","text":"Amiga Basic BMAP file maps offset routines Amiga libraries. function converts raw format stored file comprehensive S3 class object.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicBMAP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicBMAP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data into an AmigaBasicBMAP class object — rawToAmigaBasicBMAP","text":"","code":"## A small fragment of the dos.library BMAP would look like this: dos.bmap <- as.AmigaBasicBMAP(list(   xOpen = list(     libraryVectorOffset = -30,     registers = as.raw(2:3)   ),   xClose = list(     libraryVectorOffset = -36,     registers = as.raw(2)   ),   xRead = list(     libraryVectorOffset = -42,     registers = as.raw(2:4)   ) ))  ## The raw representation would be dos.bmap.raw <- as.raw(dos.bmap)  ## And the reverse rawToAmigaBasicBMAP(dos.bmap.raw) #> [1] \"An AmigaBasicBMAP with 3 references.\""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","title":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","text":"Coerce raw data AmigaBasicShape()-class object","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","text":"","code":"rawToAmigaBasicShape(x, palette)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","text":"x vector raw data converted AmigaBasicShape() class object. palette vector character strings, element represents colour palette. palette used display graphics (note raw format store palette, S3 class ). argument omitted grey scale palette generated.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicShape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","text":"returns AmigaBasicShape()-class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicShape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","text":"AmigaBasicShape() objects comprehensive representations blitter sprite graphics can used AmigaBasic() scripts. Use function convert raw content AmigaBasicShape() object.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBasicShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data into an AmigaBasicShape class object — rawToAmigaBasicShape","text":"","code":"filename <- system.file(\"ball.shp\", package = \"AmigaFFH\")  ## read as binary: con      <- file(filename, \"rb\") ball.raw <- readBin(con, \"raw\", file.size(filename)) close(con)  ## convert raw data into something useful: ball     <- rawToAmigaBasicShape(ball.raw)  ## A shortcut would be to call read.AmigaBasicShape ball2    <- read.AmigaBasicShape(filename)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFont.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","title":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","text":"AmigaBitmapFont() objects comprehensive representations binary Amiga font subset files. file name usually simply numeric number indicating font height pixels. Use function convert raw content file AmigaBitmapFont() object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","text":"","code":"rawToAmigaBitmapFont(x, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","text":"x AmigaBitmapFont() object needs converted raw data. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","text":"vector raw data representing x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","text":"function converts raw data stored font bitmap files. files stored subdirectories font's name usually font height pixels file name. function effectively inverse .raw().","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data into an AmigaBitmapFont class object — rawToAmigaBitmapFont","text":"","code":"## first create raw data that can be converted into a AmigaBitmapFont data(font_example) font.raw <- as.raw(getAmigaBitmapFont(font_example, 9))  ## Convert it back into an AmigaBitmapFont object: font <- rawToAmigaBitmapFont(font.raw)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFontSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","title":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","text":"AmigaBitmapFontSet() objects comprehensive representations binary Amiga font files (*.font). Use function convert raw data file AmigaBitmapFontSet object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFontSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","text":"","code":"rawToAmigaBitmapFontSet(x, file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFontSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","text":"x vector raw data needs converted AmigaBitmapFontSet(). file raw version AmigaBitmapFontSet() contain nested font bitmap images. order correctly construct AmigaBitmapFontSet() file location original *.font file required order read include font bitmap image information. file thus character string specifying file location *.font file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFontSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","text":"Returns AmigaBitmapFontSet() object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFontSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","text":"function converts raw data stored *.font files. function also needs file location, order load nested bitmap images font height. function effectively inverse .raw().","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFontSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaBitmapFontSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data into an AmigaBitmapFontSet class object — rawToAmigaBitmapFontSet","text":"","code":"data(font_example)  ## First create raw font set data. Note that this raw data ## does not include the nested font bitmap images. fontset.raw <- as.raw(font_example)  ## Therefore it is necesary to have the entire font stored as files: write.AmigaBitmapFontSet(font_example, tempdir())  font.restored <- rawToAmigaBitmapFontSet(fontset.raw, file.path(tempdir(), \"AmigaFFH.font\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","title":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","text":"AmigaIcon() objects comprehensive representations binary Amiga Workbench icon files (*.info). Use function convert raw data file AmigaIcon() object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","text":"","code":"rawToAmigaIcon(x, palette = NULL)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","text":"x vector raw data needs converted S3 AmigaIcon() class object. palette Provide palette (vector colours) icon bitmap image. set NULL (default) standard Amiga Workbench palette used.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","text":"Returns AmigaIcon() class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaIcon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","text":"Icons files (*.info) used graphical representations files directories Commodore Amiga. function convert raw data files comprehensive names list (see AmigaIcon()). Use .raw() achieve inverse.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaIcon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToAmigaIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data into an AmigaIcon class object — rawToAmigaIcon","text":"","code":"## generate a simple AmigaIcon object: icon <- simpleAmigaIcon()  ## convert it into raw data: icon.raw <- as.raw(icon)  ## convert the raw data back into an icon: icon.restored <- rawToAmigaIcon(icon.raw)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"Convert raw data structured conform Commodore Amiga hardware sprite (see references) hardwareSprite() object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"","code":"# S4 method for class 'raw,missing' rawToHWSprite(x, col)  # S4 method for class 'raw,character' rawToHWSprite(x, col)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"x raw data structured Amiga hardware sprite (see references). col vector colours (character) used hardware sprite. Specify three visible colours sprite. missing default colours (grayscale) used. colours provided separately usually stored together hardware sprite data.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"Returns hardwareSprite() object based provided raw data","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"Information set hardware sprite stored raw data Commodore Amigas. method can used convert data hardwareSprite() object. object can turn converted .raster() can plotted R.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"http://amigadev.elowar.com/read/ADCD_2.1/Hardware_Manual_guide/node00B9.html","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToHWSprite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raw data into an Amiga hardware sprite — rawToHWSprite","text":"","code":"## Let's generate a 16x16 sprite with a random bitmap: dat <- as.raw(c(0x00, 0x00, 0x10, 0x00,               sample.int(255, 64, replace = TRUE),               0x00, 0x00, 0x00, 0x00)) ## make it a hardware sprite object: spr <- rawToHWSprite(dat) ## and plot it: plot(spr, interpolate = FALSE)   ## with some imagination when can make ## a more structured image: dat <- as.raw(c(0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xff, 0xf8,                 0x7f, 0x80, 0x80, 0x70, 0x7f, 0x00, 0xbe, 0xe0,                 0x7e, 0x00, 0x85, 0xc0, 0x7d, 0x80, 0x82, 0x40,                 0x6b, 0xc0, 0x95, 0xa0, 0x57, 0xe0, 0xa8, 0xd0,                 0x2f, 0xf0, 0xd1, 0x68, 0x4f, 0xf8, 0xb0, 0x34,                 0x07, 0xfc, 0xf8, 0x5a, 0x03, 0xfe, 0xe4, 0x0d,                 0x01, 0xfc, 0xc2, 0x12, 0x00, 0xf8, 0x81, 0x04,                 0x00, 0x70, 0x00, 0x88, 0x00, 0x20, 0x00, 0x50,                 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00)) spr <- rawToHWSprite(dat, c(\"#EE4444\", \"#000000\", \"#EEEECC\")) plot(spr, interpolate = FALSE)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToIFFChunk.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","title":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","text":"Coerce raw data, stored Interchange File Format (IFF), convert IFFChunk() class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToIFFChunk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","text":"","code":"# S4 method for class 'raw' rawToIFFChunk(x)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToIFFChunk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","text":"x vector raw data needs converted IFFChunk() class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToIFFChunk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","text":"Returns IFFChunk() class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToIFFChunk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","text":"method work IFF chunk types implemented package (see IFFChunk-method() details). non-implemented chunks method may work properly long chunks nested inside FORM type container chunk. method provided convenience, recommended import IFFChunk methods using read.iff() function. Use .raw() achieve inverse method.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToIFFChunk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToIFFChunk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data to an IFFChunk class object — rawToIFFChunk","text":"","code":"## Get an IFFChunk object: example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## Coerce it to raw data: example.raw <- as.raw(example.iff)  ## Coerce raw data to IFF chunk: example.iff.new <- rawToIFFChunk(example.raw)  ## These conversions were non-destructive: identical(example.iff, example.iff.new) #> [1] TRUE"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToSysConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce raw data into a SysConfig class object — rawToSysConfig","title":"Coerce raw data into a SysConfig class object — rawToSysConfig","text":"SysConfig objects comprehensive representations binary Amiga system-configuration files. Use function convert raw data file SysConfig object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToSysConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce raw data into a SysConfig class object — rawToSysConfig","text":"","code":"rawToSysConfig(x)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToSysConfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce raw data into a SysConfig class object — rawToSysConfig","text":"x vector raw data needs converted S3 SysConfig class object. length least 232. Although system-configurations can extended, extended files supported .","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToSysConfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce raw data into a SysConfig class object — rawToSysConfig","text":"Returns SysConfig class object based x.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToSysConfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce raw data into a SysConfig class object — rawToSysConfig","text":"Amiga used system-configuration file store certain system preferences binary file. function raw data can converted comprehensive SysConfig object. Use .raw() achieve inverse.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToSysConfig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coerce raw data into a SysConfig class object — rawToSysConfig","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/rawToSysConfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce raw data into a SysConfig class object — rawToSysConfig","text":"","code":"if (requireNamespace(\"adfExplorer\", quietly = TRUE)) {   library(adfExplorer)      ## get the system-configuration from the adfExplorer example disk:   disk <- connect_adf(     system.file(\"example.adz\", package = \"adfExplorer\")   )   virtual_file_con <- adf_file_con(disk, \"devs/system-configuration\")   sc <- readBin(virtual_file_con, \"raw\", 1024)   close(disk)    ## This will get you the raw data from the file:   typeof(sc)    ## Convert the raw data to a more comprehensive named list (and S3 SysConfig class):   sc <- rawToSysConfig(sc) } #>  #> Attaching package: ‘adfExplorer’ #> The following objects are masked from ‘package:base’: #>  #>     readBin, readLines, writeBin, writeLines"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Amiga Basic files — read.AmigaBasic","title":"Read Amiga Basic files — read.AmigaBasic","text":"Read AmigaBasic() script binary format.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Amiga Basic files — read.AmigaBasic","text":"","code":"read.AmigaBasic(file, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Amiga Basic files — read.AmigaBasic","text":"file character string filename Amiga Basic file read. ... Currently ignored","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Amiga Basic files — read.AmigaBasic","text":"Returns AmigaBasic() class object read file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Amiga Basic files — read.AmigaBasic","text":"Normally Amiga Basic code stored encoded binary format (rawToAmigaBasic()). function reads binary data file (can stored virtual disk (adf_file_con())) converts AmigaBasic() class objec.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Amiga Basic files — read.AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Amiga Basic files — read.AmigaBasic","text":"","code":"## First create an AmigaBasic file write.AmigaBasic(as.AmigaBasic(\"PRINT \\\"Hello world\\\"\"),                  file.path(tempdir(), \"helloworld.bas\"))  ## Now let's read the same file: bas <- read.AmigaBasic(file.path(tempdir(), \"helloworld.bas\"))  ## There's also a demo file included with the package demo.bas <- read.AmigaBasic(system.file(\"demo.bas\", package = \"AmigaFFH\")) demo.bas #> OPEN \"ball.shp\" FOR INPUT AS 1 #> OBJECT.SHAPE 1,INPUT$(LOF(1),1) #> CLOSE 1 #> OBJECT.X 1,320 #> OBJECT.Y 1,127 #> OBJECT.ON 1 #> OBJECT.START #> LET t=0 #> PRINT \"Press any key to continue...\" #> WHILE INKEY$ =\"\" #>   OBJECT.X 1, 320+200*SIN(t) #>   OBJECT.Y 1, 127+100*COS(t) #>   t=t+.001 #> WEND #> SCREEN 1,320,256,3,1 #> WINDOW 1,\"Bob Window\",(0,0)-(297,242),31,1 #> PALETTE 0,1,1,1 #> PALETTE 1,.1333333,.4,.7333333 #> PALETTE 2,.2,.4,.7333333 #> PALETTE 3,.2666667,.4666667,.6666667 #> PALETTE 4,.4666667,.5333333,.6 #> PALETTE 5,.6,.6,.6 #> PALETTE 6,.6666667,.6666667,.6666667 #> PALETTE 7,.7333333,.7333333,.7333333 #> FOR i% = 0 TO 7 #>   COLOR i% #>   AREA (i%*10, 30) #>   AREA STEP (10, 0) #>   AREA STEP (0, 10) #>   AREA STEP (-10,0) #>   AREAFILL #> NEXT i% #> OPEN \"r_logo.shp\" FOR INPUT AS 1 #> OBJECT.SHAPE 2,INPUT$(LOF(1),1) #> CLOSE 1 #> OBJECT.X 2,160 #> OBJECT.Y 2,127 #> OBJECT.ON 2 #> PRINT \"Press any key to stop...\" #> WHILE INKEY$=\"\" #>   OBJECT.X 2, 160+100*SIN(t*.3) #>   OBJECT.Y 2, 127+50*COS(t) #>   t=t+.01 #> WEND #> SCREEN CLOSE 1 #> END"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasicShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Amiga Basic Shape files — read.AmigaBasicShape","title":"Read Amiga Basic Shape files — read.AmigaBasicShape","text":"Read Amiga Basic Shape files","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasicShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Amiga Basic Shape files — read.AmigaBasicShape","text":"","code":"read.AmigaBasicShape(file, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasicShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Amiga Basic Shape files — read.AmigaBasicShape","text":"file character string filename Amiga Basic Shape file read. ... Arguments passed rawToAmigaBasicShape().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasicShape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Amiga Basic Shape files — read.AmigaBasicShape","text":"Returns AmigaBasicShape() class object read file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasicShape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Amiga Basic Shape files — read.AmigaBasicShape","text":"AmigaBasic used term 'shapes' graphics (sprites blitter objects) display. graphics stored specific binary format, can read function. See AmigaBasicShape() details. file can also read virtual Amiga disk (adf_file_con()).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasicShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Amiga Basic Shape files — read.AmigaBasicShape","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBasicShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Amiga Basic Shape files — read.AmigaBasicShape","text":"","code":"filename <- system.file(\"ball.shp\", package = \"AmigaFFH\") ball     <- read.AmigaBasicShape(filename) ## This is a sprite: ball$flags[[\"fVSprite\"]] #> [1] TRUE  filename <- system.file(\"r_logo.shp\", package = \"AmigaFFH\") ## The palette is not stored with an Amiga Basic Shape, so let's provide one: r_logo   <- read.AmigaBasicShape(filename,                                  palette = c(\"#FFFFFF\", \"#2266BB\", \"#3366BB\", \"#4477AA\",                                  \"#778899\", \"#999999\", \"#AAAAAA\", \"#BBBBBB\")) ## This is a blitter object: r_logo$flags[[\"fVSprite\"]] #> [1] FALSE  ## Just for fun, plot it: plot(r_logo)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFont.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","title":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","text":"Amiga Font Bitmaps distinctive font heights stored separate files, combination form font collection set. function can used read specific bitmap set returns AmigaBitmapFont() class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","text":"","code":"read.AmigaBitmapFont(file, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","text":"file file name font subset usually simply numeric number indicating font height pixels. Use file character string representing file location. ... Arguments passed rawToAmigaBitmapFont().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","text":"Returns AmigaBitmapFont() object read specified file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","text":"Individual font bitmaps stored font's subdirectory file name usually equal font height pixels. function read font bitmap file return AmigaBitmapFont() class object. can also read files virtual disks (adf_file_con()) objects, requires adfExplorer package installed.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an AmigaBitmapFont class object from a file — read.AmigaBitmapFont","text":"","code":"data(font_example)  ## Let's store the example font first: write.AmigaBitmapFontSet(font_example, tempdir())  ## Now read a specific subset from the font files: font.sub <- read.AmigaBitmapFont(file.path(tempdir(), \"AmigaFFH\", \"9\"))  ## The same can be done with a virtual Amiga disk. The following ## examples require the 'adfExplorer' package. if (requireNamespace(\"adfExplorer\")) {   library(\"adfExplorer\")   virtual_disk_file <- tempfile(fileext = \".adf\") |>     create_adf_device(write_protected = FALSE) |>     prepare_adf_device(\"font_disk\") |>     make_adf_dir(\"FONTS\")      dest <- virtual_path(virtual_disk_file, \"DF0:FONTS\")   write.AmigaBitmapFontSet(font_example, dest)   font.read <- read.AmigaBitmapFont(     virtual_path(virtual_disk_file, \"DF0:FONTS/AmigaFFH/9\")   )   close(virtual_disk_file) }"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFontSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","title":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","text":"Reads AmigaBitmapFontSet() *.font file including nested bitmap images font heights.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFontSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","text":"","code":"read.AmigaBitmapFontSet(file, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFontSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","text":"file character string filename *.font file read. ... Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFontSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","text":"Returns AmigaBitmapFontSet() object read specified file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFontSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","text":"*.font file holds meta-information. bitmap images font height stored separate files, listed *.font file. function reads *.font file, including nested bitmap files returns AmigaBitmapFontSet(). can also read *.font files virtual disks ((adf_file_con())) objects, requires adfExplorer package installed.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFontSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaBitmapFontSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read AmigaBitmapFontSet from *.font file — read.AmigaBitmapFontSet","text":"","code":"data(font_example)  ## in order to read, we first need to write a file\" write.AmigaBitmapFontSet(font_example, tempdir())  ## The font is written as 'AmigaFFH.font' as that name ## is embedded in the AmigaBitmapFontSet object 'font_example'. ## We can read it as follows: font.read <- read.AmigaBitmapFontSet(file.path(tempdir(), \"AmigaFFH.font\"))  ## similarly, the file can also be written and read from and to ## a virtual amiga disk. The following codes requires the 'adfExplorer' ## package: if (requireNamespace(\"adfExplorer\")) {   library(\"adfExplorer\")   virtual_disk_file <- tempfile(fileext = \".adf\") |>     create_adf_device(write_protected = FALSE) |>     prepare_adf_device(\"font_disk\") |>     make_adf_dir(\"FONTS\")      dest <- virtual_path(virtual_disk_file, \"DF0:FONTS\")   write.AmigaBitmapFontSet(font_example, dest)   font.read <- read.AmigaBitmapFontSet(     virtual_path(virtual_disk_file, \"DF0:FONTS/AmigaFFH.font\")   )   close(virtual_disk_file) }"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","title":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","text":"Graphical representation files directories (icons) stored separate files (.info extension) Amiga. function reads files imports AmigaIcon() class objects.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","text":"","code":"read.AmigaIcon(file, ...)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","text":"file character string representing file name icon data read. ... Arguments passed rawToAmigaIcon().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","text":"Returns AmigaIcon() class object read file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaIcon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","text":"AmigaIcon() S3 object provides comprehensive format Amiga icons, used graphical representation files directories Amiga. AmigaIcon() named list containing information icon. Use function read Amiga icon (.info extension) file convert AmigaIcon() object.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaIcon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.AmigaIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an Amiga Workbench icon (info) file — read.AmigaIcon","text":"","code":"## create a simple AmigaIcon: icon <- simpleAmigaIcon()  ## write the icon to the temp dir: write.AmigaIcon(icon, file.path(tempdir(), \"icon.info\"))  ## read the same file: icon2 <- read.AmigaIcon(file.path(tempdir(), \"icon.info\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.SysConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Read an Amiga system-configuration file — read.SysConfig","title":"Read an Amiga system-configuration file — read.SysConfig","text":"Read binary Amiga system-configuration file return SysConfig object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.SysConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read an Amiga system-configuration file — read.SysConfig","text":"","code":"read.SysConfig(file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.SysConfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read an Amiga system-configuration file — read.SysConfig","text":"file file name system-configuration file read. Can also connection allows reading binary data.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.SysConfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read an Amiga system-configuration file — read.SysConfig","text":"Returns S3 SysConfig class object based file read.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.SysConfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read an Amiga system-configuration file — read.SysConfig","text":"Amiga OS 1.x stored system preferences binary system-configuration file. function returns file comprehensive format (SysConfig object).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.SysConfig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read an Amiga system-configuration file — read.SysConfig","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.SysConfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read an Amiga system-configuration file — read.SysConfig","text":"","code":"## Put a simple SysConfig object into the tempdir: write.SysConfig(simpleSysConfig(), file.path(tempdir(), \"system-configuration\"))  ## Now read the same file: sc <- read.SysConfig(file.path(tempdir(), \"system-configuration\"))  ## and plot it plot(sc)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.iff.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Interchange File Format (IFF) — read.iff","title":"Read Interchange File Format (IFF) — read.iff","text":"Read Interchange File Format (IFF) IFFChunk() object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.iff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Interchange File Format (IFF) — read.iff","text":"","code":"read.iff(file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.iff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Interchange File Format (IFF) — read.iff","text":"file filename IFF file read, connection binary data can read.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.iff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Interchange File Format (IFF) — read.iff","text":"Returns IFFChunk() object read specified file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.iff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Interchange File Format (IFF) — read.iff","text":"Information stored `chunks' IFF files (see IFFChunk()). chunk least contain label type chunk data chunk. function reads chunks valid IFF file, including nested chunks stores IFFChunk() object. IFF files can hold kind data (e.g. images audio), read function interpret file. Use interpretIFFChunk() purpose.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.iff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Interchange File Format (IFF) — read.iff","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/read.iff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Interchange File Format (IFF) — read.iff","text":"","code":"## let's read a bitmap image stored in IFF as provided with this package: filename <- system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\") example.iff <- read.iff(filename)  ## And plot it: plot(example.iff)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleAmigaIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Create simple AmigaIcon objects — simpleAmigaIcon","title":"Create simple AmigaIcon objects — simpleAmigaIcon","text":"Graphical representation files directories (icons) stored separate files (.info extension) Amiga. function writes AmigaIcon() class objects files.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleAmigaIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create simple AmigaIcon objects — simpleAmigaIcon","text":"","code":"simpleAmigaIcon(   version = c(\"OS1.x\", \"OS2.x\"),   type = c(\"WBDISK\", \"WBDRAWER\", \"WBTOOL\", \"WBPROJECT\", \"WBGARBAGE\", \"WBDEVICE\",     \"WBKICK\", \"WBAPPICON\"),   two.images = TRUE,   back.fill = FALSE,   ... )"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleAmigaIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create simple AmigaIcon objects — simpleAmigaIcon","text":"version character string indicating Amiga OS version icon compatible. \"OS2.x\" indicates \\>=OS2.0 \"OS1.x\" indicates <OS2.0. type character string indicating type object (file, disk, directory, etc.) icon represent. See `Usage' section posible options. two.images single logical value, indicating whether selected icon depicted second image (case icon contains two images). default value TRUE. back.fill single logical value, indicating whether selected image icon use back fill' mode (default). set FALSE complement' mode used. Note back fill compatible icon holds two images. complement' mode, image colours inverted selected. back fill' exterior first colour inverted. ... Reserved additional arguments. Currently ignored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleAmigaIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create simple AmigaIcon objects — simpleAmigaIcon","text":"Returns simple S3 object class AmigaIcon().","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleAmigaIcon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create simple AmigaIcon objects — simpleAmigaIcon","text":"function creates basic AmigaIcon() objects can modified afterwards. uses simple generic images represent different types files directories.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleAmigaIcon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create simple AmigaIcon objects — simpleAmigaIcon","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleAmigaIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create simple AmigaIcon objects — simpleAmigaIcon","text":"","code":"## Create an AmigaIcon object using the default arguments: icon <- simpleAmigaIcon()"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleSysConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","title":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","text":"SysConfig objects comprehensive representations binary Amiga system-configuration files. Use function create simple SysConfig object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleSysConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","text":"","code":"simpleSysConfig(options)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleSysConfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","text":"options named list elements target SysConfig() object need modified.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleSysConfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","text":"Returns comprehensive representation system-configuration file SysConfig class object.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleSysConfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","text":"Amiga used system-configuration file store certain system preferences binary file. AmigaFFH package files can represented comprehensive SysConfig class object. Use function create object basic settings (can modified).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleSysConfig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/simpleSysConfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to generate a simple Amiga system-configuration representation — simpleSysConfig","text":"","code":"## Create a simple system-configuration (S3 SysConfigClass) sc <- simpleSysConfig()  ## And modify it as you wish. ## in this case change the setting for the printer ## from the parallel port to the serial port: sc$PrinterPort <- factor(\"SERIAL_PRINTER\", levels(sc$PrinterPort))  ## It is also to provide modifications to the configuration ## via the 'options' argument: sc <- simpleSysConfig(options = list(FontHeight = 9))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get an Amiga timeval struct value from raw data — timeval","title":"Get an Amiga timeval struct value from raw data — timeval","text":"Amiga applications use timeval struct (see references) represent time span seconds. function coerces raw data numeric time span.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get an Amiga timeval struct value from raw data — timeval","text":"","code":"timeval(x)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get an Amiga timeval struct value from raw data — timeval","text":"x vector raw data need converted Amiga timeval structs.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get an Amiga timeval struct value from raw data — timeval","text":"Returns numeric vector timespan seconds. represented S3 AmigaTimeVal class.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get an Amiga timeval struct value from raw data — timeval","text":"Timeval structure (struct) specified device/timer.h Amiga (see references). represents timespan seconds. function retrieves numeric value raw data. Amongst others, timeval struct used system-configuration file (see SysConfig) specify key repeat speed, key repeat delay mouse double click speed. Use .raw inverse function get original raw data.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get an Amiga timeval struct value from raw data — timeval","text":"http://amigadev.elowar.com/read/ADCD_2.1/Includes_and_Autodocs_2._guide/node0053.html","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get an Amiga timeval struct value from raw data — timeval","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/timeval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get an Amiga timeval struct value from raw data — timeval","text":"","code":"## First four raw values represent seconds, the latter four microseconds: temp <- timeval(as.raw(c(0, 0, 0, 1, 0, 0, 0, 1))) print(temp) #> 1.000001 [s] Amiga timeval struct  ## You can use 'as.raw' to get the original raw data again: as.raw(temp) #> [1] 00 00 00 01 00 00 00 01"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasic.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an AmigaBasic object to a file — write.AmigaBasic","title":"Write an AmigaBasic object to a file — write.AmigaBasic","text":"Write AmigaBasic() class object file binary format.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an AmigaBasic object to a file — write.AmigaBasic","text":"","code":"write.AmigaBasic(x, file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an AmigaBasic object to a file — write.AmigaBasic","text":"x AmigaBasic() class object needs stored. file character string specifying file location x (AmigaBasic() object) needs written.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an AmigaBasic object to a file — write.AmigaBasic","text":"Invisibly returns result call close file connection.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write an AmigaBasic object to a file — write.AmigaBasic","text":"function encodes Amiga Basic code binary format (using .raw()) writes file. file can also stored onto virtual Amiga disk (adf_file_con()).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write an AmigaBasic object to a file — write.AmigaBasic","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an AmigaBasic object to a file — write.AmigaBasic","text":"","code":"## First create an AmigaBasic object: bas <- as.AmigaBasic(\"PRINT \\\"hello world!\\\"\")  ## write to tempdir: write.AmigaBasic(bas, file.path(tempdir(), \"helloworld.bas\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasicShape.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","title":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","text":"Write AmigaBasicShape() class object file binary format.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasicShape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","text":"","code":"write.AmigaBasicShape(x, file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasicShape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","text":"x AmigaBasicShape() class object needs stored. file character string specifying file location x (AmigaBasicShape() object) needs written.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasicShape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","text":"Invisibly returns result call close file connection.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasicShape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","text":"function coerces Amiga Basic Shape binary format (using .raw()) writes file. file can also stored onto virtual Amiga disk (adf_file_con()).","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasicShape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBasicShape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an AmigaBasicShape object to a file — write.AmigaBasicShape","text":"","code":"filename <- system.file(\"ball.shp\", package = \"AmigaFFH\") ball     <- read.AmigaBasicShape(filename) write.AmigaBasicShape(ball, file.path(tempdir(), \"ball.shp\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBitmapFont.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","title":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","text":"Functions write AmigaBitmapFont() AmigaBitmapFontSet() class objects files.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBitmapFont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","text":"","code":"write.AmigaBitmapFont(x, file)  write.AmigaBitmapFontSet(x, path = getwd())"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBitmapFont.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","text":"x Respectively AmigaBitmapFont() AmigaBitmapFontSet() object depending write-functions called. object written specified file. file character string specifying file location x (AmigaBitmapFont() object) needs written. common practice Amiga use font height pixels file name. path character string specifying path x (AmigaBitmapFontSet() object) needs stored. filename font set extracted x using fontName() followed *.font extension. subdirectory created name (without extension) already exists. subdirectory nested AmigaBitmapFont() objects stored.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBitmapFont.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","text":"Invisibly returns result call close file connection.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBitmapFont.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","text":"AmigaBitmapFontSet() class objects written *.font file. filename used purpose obtained object using fontName(). addition, subdirectory created automatically (already exist) al separate bitmap images font height written individual files. AmigaBitmapFont() class objects can also written file. order use Commodore Amiga emulator, better embed font bitmap font set (using c()) write set corresponding files.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBitmapFont.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaBitmapFont.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an AmigaBitmapFont(set) file — write.AmigaBitmapFont","text":"","code":"## obtain a bitmap font set: data(font_example)  ## write the font set to their files. The file name ## is extracted from the font object, so you only have ## to provide the path: write.AmigaBitmapFontSet(font_example, tempdir())  ## extract a font bitmap: font <- getAmigaBitmapFont(font_example, 9)  ## and write it to the temp dir: write.AmigaBitmapFont(font, file.path(tempdir(), \"9\"))  ## The following examples require the 'adfExplorer' package: if (requireNamespace(\"adfExplorer\")) {   library(\"adfExplorer\")   virtual_disk_file <- tempfile(fileext = \".adf\") |>     create_adf_device(write_protected = FALSE) |>     prepare_adf_device(\"font_disk\") |>     make_adf_dir(\"FONTS\")      dest <- virtual_path(virtual_disk_file, \"DF0:FONTS\")   write.AmigaBitmapFontSet(font_example, dest)   close(virtual_disk_file) }"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaIcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","title":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","text":"Graphical representation files directories (icons) stored separate files (.info extension) Amiga. function writes AmigaIcon() class objects files.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaIcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","text":"","code":"write.AmigaIcon(x, file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaIcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","text":"x AmigaIcon() class object. file character string representing file name icon data written.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaIcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","text":"Returns NULL integer status passed close() function, used close file connection. returned invisibly.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaIcon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","text":"AmigaIcon() S3 object provides comprehensive format Amiga icons, used graphical representation files directories Amiga. AmigaIcon() named list containing information icon. Use function write object file can used Commodore Amiga emulator.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaIcon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.AmigaIcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an Amiga Workbench icon (info) file — write.AmigaIcon","text":"","code":"## create a simple AmigaIcon: icon <- simpleAmigaIcon()  ## write the icon to the temp dir: write.AmigaIcon(icon, file.path(tempdir(), \"icon.info\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.SysConfig.html","id":null,"dir":"Reference","previous_headings":"","what":"Write an Amiga system-configuration file — write.SysConfig","title":"Write an Amiga system-configuration file — write.SysConfig","text":"Write SysConfig class object Amiga binary system-configuration file.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.SysConfig.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write an Amiga system-configuration file — write.SysConfig","text":"","code":"write.SysConfig(x, file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.SysConfig.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write an Amiga system-configuration file — write.SysConfig","text":"x S3 SysConfig class object. file file name binary file written.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.SysConfig.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write an Amiga system-configuration file — write.SysConfig","text":"Returns NULL integer status passed close() function, used close file connection. returned invisibly.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.SysConfig.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write an Amiga system-configuration file — write.SysConfig","text":"Amiga OS 1.x stored system preferences binary system-configuration file. function writes SysConfig class object binary file. file can used Amiga emulator.","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.SysConfig.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write an Amiga system-configuration file — write.SysConfig","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.SysConfig.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write an Amiga system-configuration file — write.SysConfig","text":"","code":"## First generate a simple SysConfig object to write to a file: sc <- simpleSysConfig()  ## And write to the tempdir: write.SysConfig(sc, file.path(tempdir(), \"system-configuration\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":null,"dir":"Reference","previous_headings":"","what":"Write Interchange File Format (IFF) — write.iff","title":"Write Interchange File Format (IFF) — write.iff","text":"Write IFFChunk() object conform Interchange File Format (IFF).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write Interchange File Format (IFF) — write.iff","text":"","code":"write.iff(x, file)"},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write Interchange File Format (IFF) — write.iff","text":"x IFFChunk() object needs written file. file filename IFF file IFFChunk() needs saved, connection data written.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write Interchange File Format (IFF) — write.iff","text":"Returns either NULL integer status invisibly passed close() statement used close file connection.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write Interchange File Format (IFF) — write.iff","text":"Writes IFFChunk() object (including nested chunks) specified file. structure object needs valid, however, correctly structured file necessarily result interpretable file (see examples).","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Write Interchange File Format (IFF) — write.iff","text":"https://en.wikipedia.org/wiki/Interchange_File_Format","code":""},{"path":[]},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Write Interchange File Format (IFF) — write.iff","text":"Pepijn de Vries","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/reference/write.iff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write Interchange File Format (IFF) — write.iff","text":"","code":"## read an IFF file as an IFFChunk object: example.iff <- read.iff(system.file(\"ilbm8lores.iff\", package = \"AmigaFFH\"))  ## This will write the IFF file (in this case a bitmap image) ## to the temp directory: write.iff(example.iff, file.path(tempdir(), \"image.iff\"))"},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v046","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.4.6","title":"AmigaFFH v0.4.6","text":"Fixed broken adfExplorer dependency Manual examples updated conform CRAN policies","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v045","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.4.5","title":"AmigaFFH v0.4.5","text":"CRAN release: 2024-02-29 Added README Switched markdown documentation roxygen2 Added pkgdown website","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v043","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.4.3","title":"AmigaFFH v0.4.3","text":"CRAN release: 2023-08-27 Fixed link documentation order pass CRAN checks","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v042","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.4.2","title":"AmigaFFH v0.4.2","text":"CRAN release: 2023-08-22 Updates order compy latest CRAN policies roxygen2 standards","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v041","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.4.1","title":"AmigaFFH v0.4.1","text":"CRAN release: 2021-09-03 Updated URLs manual conform CRAN policy","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v040","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.4.0","title":"AmigaFFH v0.4.0","text":"Fixed bug Amiga Icon implementation Added support Amiga Basic files Minor corrections updates manual.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v031","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.3.1","title":"AmigaFFH v0.3.1","text":"CRAN release: 2019-03-31 Resubmission CRAN due offline URL references documentation","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v030","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.3.0","title":"AmigaFFH v0.3.0","text":"Added support Amiga Bitmap fonts Added support interpretation creation HAM6 HAM8 mode (special modes Amiga) bitmap images. Added support directly reading files writing files amigaDisk class objects (adfExplorer package). Modified ‘simpleSysConfig’ specific settings can passed arguments Fixed bug viewportmode checks Corrected replace functions SysConfig objects Suppressed unnecessary warnings .raw.AmigaIcon function Minor corrections manual","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v020","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.2.0","title":"AmigaFFH v0.2.0","text":"CRAN release: 2019-01-27 Added support Amiga Workbench Icons (*.info) Added support Amiga’s system-configuration file Added rasterToHWSprite function Changed ‘.raster’ S4 method S3 function flexibility. ‘rasterToBitmap’ decode continuous bitmaps correctly. fixed. Fortunately Amiga mostly uses interleaved bitmaps anyway. Added constrains error distribution dither method ‘index.colours’. Without constrains errors accumulate certain images cause undesirable results. Fixed transparency detection ‘index.colour’ function Bug-fix interpretation IFF ANIM frames Moved ProTrackR adfExplorer ‘Depends’ ‘Suggests’ avoid circular dependancy Several minor corrections manual","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v012","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.1.2","title":"AmigaFFH v0.1.2","text":"CRAN release: 2018-03-14 minor fix examples pass CRAN checks.","code":""},{"path":"https://pepijn-devries.github.io/AmigaFFH/news/index.html","id":"amigaffh-v011","dir":"Changelog","previous_headings":"","what":"AmigaFFH v0.1.1","title":"AmigaFFH v0.1.1","text":"First release: reading writing IFF files interpretation several common data flavours IFF files interpret hardware sprites","code":""}]
